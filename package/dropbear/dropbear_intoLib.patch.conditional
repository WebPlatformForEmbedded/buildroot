--- a/Makefile.in
+++ b/Makefile.in
@@ -10,7 +10,7 @@
 # Hopefully that seems intuitive.
 
 ifndef PROGRAMS
-	PROGRAMS=dropbear dbclient dropbearkey dropbearconvert
+	PROGRAMS=dropbear
 endif
 
 STATIC_LTC=libtomcrypt/libtomcrypt.a
@@ -18,6 +18,8 @@
 
 LIBTOM_LIBS=@LIBTOM_LIBS@
 
+DROPBEAR_SERVER_LIB=libdropbear.so
+
 ifeq (@BUNDLED_LIBTOM@, 1)
 LIBTOM_DEPS=$(STATIC_LTC) $(STATIC_LTM) 
 CFLAGS+=-I$(srcdir)/libtomcrypt/src/headers/
@@ -75,6 +77,9 @@
 bindir=@bindir@
 sbindir=@sbindir@
 mandir=@mandir@
+libdir = @libdir@
+includedir = @includedir@
+pkgconfigdir = $(libdir)/pkgconfig
 
 CC=@CC@
 AR=@AR@
@@ -82,9 +87,10 @@
 STRIP=@STRIP@
 INSTALL=@INSTALL@
 CPPFLAGS=@CPPFLAGS@
-CFLAGS+=-I. -I$(srcdir) $(CPPFLAGS) @CFLAGS@
+CFLAGS+=-I. -I$(srcdir) $(CPPFLAGS) @CFLAGS@ -fPIC
 LIBS+=@LIBS@
 LDFLAGS=@LDFLAGS@
+ARFLAGS=rcT
 
 EXEEXT=@EXEEXT@
 
@@ -106,12 +112,14 @@
 
 ifeq ($(STATIC), 1)
 	LDFLAGS+=-static
+else
+	LDFLAGS +=-shared
 endif
 
 ifeq ($(MULTI), 1)
 	TARGETS=dropbearmulti
 else
-	TARGETS=$(PROGRAMS)
+	TARGETS=$(DROPBEAR_SERVER_LIB)
 endif
 
 # for the scp progress meter. The -D doesn't affect anything else.
@@ -175,6 +183,9 @@
 scp: $(SCPOBJS)  $(HEADERS) Makefile
 	$(CC) $(LDFLAGS) -o $@$(EXEEXT) $(SCPOBJS)
 
+#dropbear server as a lib needs libcurl to communicate to Thunder throigh jsonrpc
+$(DROPBEAR_SERVER_LIB):$(LIBTOM_LIBS)$(dropbearobjs)
+	$(CC) $(LDFLAGS) -o $@ $(dropbearobjs) $(LIBTOM_LIBS) -lcurl
 
 # multi-binary compilation.
 MULTIOBJS=
@@ -215,7 +226,7 @@
 
 thisclean:
 	-rm -f dropbear dbclient dropbearkey dropbearconvert scp scp-progress \
-			dropbearmulti *.o *.da *.bb *.bbg *.prof 
+			dropbearmulti *.o *.da *.bb *.bbg *.prof libdropbear.pc $(DROPBEAR_SERVER_LIB)
 
 distclean: clean tidy
 	-rm -f config.h

diff --git a/libdropbear.h b/libdropbear.h
@@ -0,0 +1,58 @@
+#ifndef __LIBDROPBEAR_H
+#define __LIBDROPBEAR_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define	IPADDRESSLENGTH		16
+#define	TIMESTAMPLENGTH		26
+
+struct client_info{
+        int  pid;
+        char ipaddress[IPADDRESSLENGTH];  //Client IPv4 address
+        char timestamp[TIMESTAMPLENGTH];  //timestamp of the received client
+};
+
+
+/**
+ * @brief Activate dropbear server
+ * @return 0 if successfull, 1 in case of error caused by mutexes, 2 in case of error during the creation of a new working thread
+ */
+uint32_t activate_dropbear(const char*);   
+
+/**
+ * @brief Deactivate dropbear server
+ * @return 0 if successfull, 1 in case of failure of in case dropbear was not running
+ */
+uint32_t deactivate_dropbear();      
+
+/**
+ * @brief get Number of active ssh sessions
+ * @return number of active sessions
+ */
+size_t get_active_sessions_count();
+
+/**
+ * @brief Get details about all open sessions
+ * @param connectedclientsContainer pointer to a container where to store all sessions informations
+ * @param size_t size of the container(number of struct of type client_info)
+ * @return 0 if successfull, 1 for any error(example dropbear is not active)
+ */
+uint32_t get_active_sessions_info(struct client_info* connectedclientsContainer, size_t number);
+
+
+/**
+ * @brief Close ssh session with specific pid
+ * @param pid pid of the ssh client session
+ * @return 0 if successfull, 1 if pid does not exist and 2 is dropbear is inactive
+ */
+uint32_t close_client_session(int pid);
+
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
finstall

--- a/configure.ac	2016-07-21 17:17:09.000000000 +0200
+++ b/configure.ac	2021-08-20 07:58:26.063608000 +0200
@@ -730,6 +730,9 @@
 AC_CONFIG_FILES(Makefile $LIBTOM_FILES)
 AC_OUTPUT
 
+AC_CONFIG_FILES(libdropbear.pc)
+AC_OUTPUT
+
 AC_MSG_NOTICE()
 if test $BUNDLED_LIBTOM = 1 ; then
 AC_MSG_NOTICE([Using bundled libtomcrypt and libtommath])

diff --git a/libdropbear.pc.in b/libdropbear.pc.in
new file mode 100644
index 0000000..2d3ce41
--- /dev/null
+++ b/libdropbear.pc.in
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libdropbear
+Version: @PACKAGE_VERSION@
+Description: Dropbear SSH
+URL: http://matt.ucc.asn.au/dropbear/releases
+Libs: -L${libdir} -ldropbear
+Cflags: -I${includedir}


diff --git a/linkedlist.h b/linkedlist.h
new file mode 100644
index 0000000..8da6057
--- /dev/null
+++ b/linkedlist.h
@@ -0,0 +1,169 @@
+/**
+ * info: linkedlist.h file is derived from the
+ * linux-5.2.1/include/linux/list.h
+ * https://www.kernel.org
+ *
+ */
+
+#ifndef _LINKED_LIST_H
+#define _LINKED_LIST_H
+#include <stdio.h>
+
+/**
+ * Get offset of a member
+ */
+#define offsetoff(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
+
+/**
+ * Casts a member of a structure out to the containing structure
+ * @param ptr        the pointer to the member.
+ * @param type       the type of the container struct this is embedded in.
+ * @param member     the name of the member within the struct.
+ *
+ */
+#define container_of(ptr,type,member) ({                                \
+                const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
+                (type *)( (char *)__mptr - offsetoff(type,member) );})
+/*
+ * These are non-NULL pointers that will result in page faults
+ * under normal circumstances, used to verify that nobody uses
+ * non-initialized list entries.
+ */
+#define LIST_POISON1  ((void *) 0x00100100)
+#define LIST_POISON2  ((void *) 0x00200200)
+
+
+#define WRITE_ONCE(ptr,value)   (ptr=value)
+
+typedef _Bool                   bool;
+
+enum {
+        false   = 0,
+        true    = 1
+};
+
+
+struct list_head {
+        struct list_head *next, *prev;
+};
+
+/*
+ * Simple doubly linked list implementation.
+ *
+ * Some of the internal functions ("__xxx") are useful when
+ * manipulating whole lists rather than single entries, as
+ * sometimes we already know the next/prev entries and we can
+ * generate better code by using them directly rather than
+ * using the generic single-entry routines.
+ */
+
+static inline void INIT_LIST_HEAD(struct list_head *list)
+{
+	WRITE_ONCE(list->next, list);
+	list->prev = list;
+}
+
+#ifdef CONFIG_DEBUG_LIST
+extern bool __list_add_valid(struct list_head *new,
+			      struct list_head *prev,
+			      struct list_head *next);
+extern bool __list_del_entry_valid(struct list_head *entry);
+#else
+static inline bool __list_add_valid(struct list_head *new,
+				struct list_head *prev,
+				struct list_head *next)
+{
+	return true;
+}
+static inline bool __list_del_entry_valid(struct list_head *entry)
+{
+	return true;
+}
+#endif
+
+/*
+ * Insert a new entry between two known consecutive entries.
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ */
+static inline void __list_add(struct list_head *new,
+			      struct list_head *prev,
+			      struct list_head *next)
+{
+	if (!__list_add_valid(new, prev, next))
+		return;
+
+	next->prev = new;
+	new->next = next;
+	new->prev = prev;
+	WRITE_ONCE(prev->next, new);
+}
+
+
+/**
+ * list_add_tail - add a new entry
+ * @new: new entry to be added
+ * @head: list head to add it before
+ *
+ * Insert a new entry before the specified head.
+ * This is useful for implementing queues.
+ */
+static inline void list_add_tail(struct list_head *new, struct list_head *head)
+{
+	__list_add(new, head->prev, head);
+}
+
+/*
+ * Delete a list entry by making the prev/next entries
+ * point to each other.
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ */
+static inline void __list_del(struct list_head * prev, struct list_head * next)
+{
+	next->prev = prev;
+	WRITE_ONCE(prev->next, next);
+}
+
+/**
+ * list_del - deletes entry from list.
+ * @entry: the element to delete from the list.
+ * Note: list_empty() on entry does not return true after this, the entry is
+ * in an undefined state.
+ */
+static inline void __list_del_entry(struct list_head *entry)
+{
+	if (!__list_del_entry_valid(entry))
+		return;
+
+	__list_del(entry->prev, entry->next);
+}
+
+static inline void list_del(struct list_head *entry)
+{
+	__list_del_entry(entry);
+	entry->next = LIST_POISON1;
+	entry->prev = LIST_POISON2;
+}
+
+/**
+ * list_entry - get the struct for this entry
+ * @ptr:	the &struct list_head pointer.
+ * @type:	the type of the struct this is embedded in.
+ * @member:	the name of the list_head within the struct.
+ */
+#define list_entry(ptr, type, member) \
+	container_of(ptr, type, member)
+
+/**
+ * list_for_each        -       iterate over a list
+ * @pos:        the &struct list_head to use as a loop cursor.
+ * @head:	the head for your list.
+ */
+#define list_for_each(pos, head) \
+	for (pos = (head)->next; pos != (head); pos = pos->next)
+
+#endif
+


diff --git a/svr-main.c b/svr-main.c
@@ -30,19 +30,43 @@
 #include "runopts.h"
 #include "dbrandom.h"
 #include "crypto_desc.h"
+#include <pthread.h>
+#include "libdropbear.h"
+#include "linkedlist.h"
 
 static size_t listensockets(int *sock, size_t sockcount, int *maxfd);
 static void sigchld_handler(int dummy);
 static void sigsegv_handler(int);
 static void sigintterm_handler(int fish);
+void init_dropbear(int argc, char ** argv);
+void free_client_info();
+static int setargs(char *args, char **argv);
+char **parsedargs(char *args, int *argc);
+void freeparsedargs(char **argv);
+
+
+
+struct list_head client_connections_info;
+
+struct active_clients{
+	struct client_info info;
+	struct list_head client_list;
+};
+
+static int pluginActivated = 0;
+static pthread_t threadID;
+static bool server_active = false;
+pthread_mutex_t lock;
+
 #ifdef INETD_MODE
 static void main_inetd(void);
 #endif
 #ifdef NON_INETD_MODE
-static void main_noinetd(void);
+static void* main_noinetd(void *);
 #endif
 static void commonsetup(void);
 
+#if 0
 #if defined(DBMULTI_dropbear) || !defined(DROPBEAR_MULTI)
 #if defined(DBMULTI_dropbear) && defined(DROPBEAR_MULTI)
 int dropbear_main(int argc, char ** argv)
@@ -75,6 +99,232 @@
 	return -1;
 }
 #endif
+#endif
+
+void init_dropbear(int argc, char ** argv)
+{
+	_dropbear_exit = svr_dropbear_exit;
+	_dropbear_log = svr_dropbear_log;
+	disallow_core();
+	/* get commandline options */
+	svr_getopts(argc, argv);
+	/* Note: commonsetup() must happen before we daemon()ise. Otherwise
+           daemon() will chdir("/"), and we won't be able to find local-dir
+           hostkeys. */
+	commonsetup();
+	INIT_LIST_HEAD(&client_connections_info);
+}
+
+static int setargs(char *args, char **argv)
+{
+	int count = 0;
+	while (isspace(*args)) ++args;
+	while (*args) {
+		if (argv) argv[count] = args;
+		while (*args && !isspace(*args)) ++args;
+		if (argv && *args) *args++ = '\0';
+		while (isspace(*args)) ++args;
+		count++;
+	}
+	return count;
+}
+
+char **parsedargs(char *args, int *argc)
+{
+	char **argv = NULL;
+	int    argn = 0;
+
+	if (args && *args
+			&& (args = strdup(args))
+			&& (argn = setargs(args,NULL))
+			&& (argv = malloc((argn+1) * sizeof(char *)))) {
+		*argv++ = args;
+		argn = setargs(args,argv);
+	}
+
+	if (args && !argv) free(args);
+	*argc = argn;
+	return argv;
+}
+
+void freeparsedargs(char **argv)
+{
+	if (argv) {
+		free(argv[-1]);
+		free(argv-1);
+	}
+}
+
+
+uint32_t activate_dropbear(const char* string)
+{
+	uint32_t result = 0;
+	int status=0;
+	int argc,len;
+	char **argv;
+	char *str;
+
+	if(pluginActivated == 0)
+	{
+		#ifdef DEBUG_TRACE
+		printf("libdropbear Activating drop bear\n");
+		#endif
+		len = strlen("dropbear ")+strlen(string)+1;
+		str=(char *)malloc(len*sizeof(char));
+		strncpy(str, "dropbear ", strlen("dropbear "));
+		strncpy(str+strlen("dropbear "), string, strlen(string)+1);
+		argv = parsedargs(str,&argc);
+		free(str);
+		/*for (int i = 0; i < argc; i++)
+			printf("argv[%d] = %s\n", i, argv[i]);*/
+
+		init_dropbear(argc, argv);
+		freeparsedargs(argv);
+		if (pthread_mutex_init(&lock, NULL) != 0)
+		{
+			result= 1;
+		}
+		if (result ==0) {
+			
+			status = pthread_create(&threadID,NULL,main_noinetd,NULL);
+		}
+		if(status != 0)
+		{
+			result= 2;
+		} 
+		
+		if(result==0){
+			pluginActivated = 1;
+		}
+		
+		return result;
+	} else {
+		#ifdef DEBUG_TRACE
+		printf("libdropbear :Dropbear is already running, can not start it again! \n");
+		#endif
+	}
+}
+
+uint32_t deactivate_dropbear()
+{
+	uint32_t result = 1;
+	#ifdef DEBUG_TRACE
+	printf("libbdropbear : DeActivating dropbear \n");
+	#endif
+	if(pluginActivated == 1)
+	{
+		pthread_mutex_lock(&lock);
+		server_active = false;
+		pthread_mutex_unlock(&lock);
+		pthread_join(threadID, 0);
+		pthread_mutex_destroy(&lock);
+		pluginActivated = 0;
+		result = 0;
+	} 
+	
+	return result;
+}
+
+/*Return the number of clients currently connected*/
+
+size_t get_active_sessions_count(){
+	size_t count=0;
+	if(pluginActivated){
+		struct active_clients *client;
+		struct list_head *ptr_list;
+		list_for_each(ptr_list,&client_connections_info){
+			client = list_entry(ptr_list,struct active_clients,client_list);
+			if(client){
+				count++;
+			}
+		}
+	}
+	return count;
+}
+
+/*To get the list of connections that are currently serving*/
+uint32_t  get_active_sessions_info(struct client_info* connectedclientsContainer,size_t connections_count){
+	uint32_t result = 0 ;
+	if(pluginActivated){
+		int count = 0;
+		struct active_clients *client;
+		struct list_head *ptr_list;
+		list_for_each(ptr_list,&client_connections_info){
+			client = list_entry(ptr_list, struct active_clients, client_list );
+			if(client && (count < connections_count)){
+				connectedclientsContainer[count].pid=client->info.pid;
+				strcpy(connectedclientsContainer[count].ipaddress,client->info.ipaddress);
+				strcpy(connectedclientsContainer[count].timestamp,client->info.timestamp);
+				count++;
+			}
+			else{
+				break;
+			}
+		}
+	} else {
+		result = 1;
+	}
+	return result;
+}
+
+/* To terminate  the server connection to client with the pid  */
+uint32_t  close_client_session(int client_pid){
+	uint32_t result = 0 ;
+	int pid_existing=0;
+	struct active_clients *client;
+	struct list_head *ptr_list;
+	if(pluginActivated){
+		list_for_each(ptr_list,&client_connections_info){
+			client = list_entry(ptr_list,struct active_clients,client_list);
+			if(client && (client->info.pid == client_pid)){
+				pid_existing=1;
+				break;
+			}
+		}
+		if(pid_existing){
+			if(kill(client_pid,SIGUSR1)== -1){
+				#ifdef DEBUG_TRACE
+				printf("Error during close session: %s\n", strerror(errno));
+				#endif
+				result=1;
+			}else {
+				#ifdef DEBUG_TRACE
+				printf("successfully closed the process : %d\n",client_pid);
+				#endif
+				//remove the closed session from the list
+				__list_del_entry(ptr_list);
+			}
+		}
+		else{
+			result =1;
+		}
+	}
+	else{
+		result =2;
+	}
+	return result;
+}
+
+
+void free_client_info(){
+	if(pluginActivated){
+		struct active_clients *client;
+		struct list_head *ptr_list;
+		list_for_each(ptr_list, &client_connections_info){
+			client = list_entry(ptr_list,struct active_clients, client_list);
+			if (client){
+				if(close_client_session(client->info.pid) != 0 ){
+					printf("unable to kill the process : %d\n",client->info.pid);
+				}
+			}
+			else{
+				break;
+			}
+		}
+	}
+
+}
+
 
 #ifdef INETD_MODE
 static void main_inetd() {
@@ -104,7 +354,8 @@
 #endif /* INETD_MODE */
 
 #ifdef NON_INETD_MODE
-static void main_noinetd() {
+static void* main_noinetd(void *UNUSED(unused)){
+	server_active = true;
 	fd_set fds;
 	unsigned int i, j;
 	int val;
@@ -118,11 +369,7 @@
 
 	int childsock;
 	int childpipe[2];
-
-	/* Note: commonsetup() must happen before we daemon()ise. Otherwise
-	   daemon() will chdir("/"), and we won't be able to find local-dir
-	   hostkeys. */
-	commonsetup();
+	struct timeval timeout;
 
 	/* sockets to identify pre-authenticated clients */
 	for (i = 0; i < MAX_UNAUTH_CLIENTS; i++) {
@@ -141,6 +388,7 @@
 		FD_SET(listensocks[i], &fds);
 	}
 
+#if 0
 	/* fork */
 	if (svr_opts.forkbg) {
 		int closefds = 0;
@@ -154,6 +402,7 @@
 		}
 	}
 
+#endif
 	/* should be done after syslog is working */
 	if (svr_opts.forkbg) {
 		dropbear_log(LOG_INFO, "Running in background");
@@ -161,6 +410,7 @@
 		dropbear_log(LOG_INFO, "Not backgrounding");
 	}
 
+
 	/* create a PID file so that we can be killed easily */
 	pidfile = fopen(svr_opts.pidfile, "w");
 	if (pidfile) {
@@ -168,6 +418,9 @@
 		fclose(pidfile);
 	}
 
+
+	timeout.tv_sec = 5;
+	timeout.tv_usec = 0;
 	/* incoming connection select loop */
 	for(;;) {
 
@@ -186,12 +439,34 @@
 			}
 		}
 
-		val = select(maxsock+1, &fds, NULL, NULL, NULL);
+		val = select(maxsock+1, &fds, NULL, NULL, &timeout);
 
-		if (exitflag) {
+		pthread_mutex_lock(&lock);
+		if (server_active == false) {
+			pthread_mutex_unlock(&lock);
+			//first closed all sessions
+			free_client_info();
 			unlink(svr_opts.pidfile);
-			dropbear_exit("Terminated by signal");
+			//dropbear_exit("Dropbear is terminated by signal \n ");
+			/* make sure we close sockets */
+			FD_ZERO(&fds);
+			for (i = 0; i < listensockcount; i++) {
+				m_close(listensocks[i]);
+			}
+			return;
+		}
+		else
+		{
+			pthread_mutex_unlock(&lock);
+		}
+
+		// exit this process after receivig a closing signal
+		pthread_mutex_lock(&lock);
+		if (exitflag==1){
+			printf("libdropbear :exitflag ==true received exit signal! \n");
+			exit(0);
 		}
+		pthread_mutex_unlock(&lock);
 		
 		if (val == 0) {
 			/* timeout reached - shouldn't happen. eh */
@@ -281,6 +556,21 @@
 			if (fork_ret > 0) {
 
 				/* parent */
+				/* taking the pids and respective IP address and timestamp to structure list*/
+				time_t now;
+				time(&now);
+				struct active_clients *client;
+				client = (struct active_clients *)malloc(sizeof(struct active_clients));
+				if(!client){
+					printf("libdropbear Error! unable to create a memory for active clients structure\n ");
+				}
+				client->info.pid = fork_ret;
+				strcpy(client->info.ipaddress, remote_host);
+				strcpy(client->info.timestamp,ctime(&now));
+				client->info.timestamp[strlen(client->info.timestamp) - 1 ] = '\0';
+				pthread_mutex_lock(&lock);
+				list_add_tail(&(client->client_list),&client_connections_info);
+				pthread_mutex_unlock(&lock);
 				childpipes[conn_idx] = childpipe[0];
 				m_close(childpipe[1]);
 				preauth_addrs[conn_idx] = remote_host;
@@ -328,6 +618,7 @@
 	} /* for(;;) loop */
 
 	/* don't reach here */
+	return NULL;
 }
 #endif /* NON_INETD_MODE */
 
@@ -338,10 +629,26 @@
 
 	const int saved_errno = errno;
 
-	while(waitpid(-1, NULL, WNOHANG) > 0) {}
+	int  pid;
+	/* disconnected ports are removing from structure List */
+	while ((pid = waitpid(0, NULL, WNOHANG)) > 0) {
+		struct active_clients *client;
+		struct list_head *ptr_list;
+
+		list_for_each(ptr_list, &client_connections_info){
+			client  = list_entry(ptr_list,struct active_clients, client_list);
+			if (client && client->info.pid == pid){
+				pthread_mutex_lock(&lock);
+				list_del(ptr_list);
+				pthread_mutex_unlock(&lock);
+				free(client);
+				break;
+			}
+		}
+	}
 
 	sa_chld.sa_handler = sigchld_handler;
-	sa_chld.sa_flags = SA_NOCLDSTOP;
+	sa_chld.sa_flags = SA_NOCLDSTOP | SA_RESTART ;
 	sigemptyset(&sa_chld.sa_mask);
 	if (sigaction(SIGCHLD, &sa_chld, NULL) < 0) {
 		dropbear_exit("signal() error");
@@ -357,10 +664,21 @@
 }
 
 /* catch ctrl-c or sigterm */
-static void sigintterm_handler(int UNUSED(unused)) {
-
+static void sigintterm_handler(int signal) {
+	#ifdef DEBUG_TRACE 
+	printf("libdropbear sigintterm_handler received  %d \n ",signal);
+	#endif
 	exitflag = 1;
 }
+static void sigusr1_handler(int signal) {
+	#ifdef DEBUG_TRACE 
+	printf("libdropbear sigusr1_handler received %d , setting  exitflag to true \n ",signal);
+	#endif
+	pthread_mutex_lock(&lock);
+	exitflag = 1;
+	pthread_mutex_unlock(&lock);
+}
+
 
 /* Things used by inetd and non-inetd modes */
 static void commonsetup() {
@@ -371,7 +689,7 @@
 		startsyslog(PROGNAME);
 	}
 #endif
-
+#if 0
 	/* set up cleanup handler */
 	if (signal(SIGINT, sigintterm_handler) == SIG_ERR || 
 #ifndef DEBUG_VALGRIND
@@ -385,12 +703,23 @@
 	sa_chld.sa_handler = sigchld_handler;
 	sa_chld.sa_flags = SA_NOCLDSTOP;
 	sigemptyset(&sa_chld.sa_mask);
+
 	if (sigaction(SIGCHLD, &sa_chld, NULL) < 0) {
 		dropbear_exit("signal() error");
 	}
+#endif
+	// Metrological: We introduced this signal to use it when we want to shut down a server process
+	if (signal(SIGUSR1, sigusr1_handler) == SIG_ERR) {
+		#ifdef DEBUG_TRACE 
+		printf("libdropbear signal failed --> stopping this instance\n");
+		#endif
+		dropbear_exit("signal() error");
+	}
+#if 0 
 	if (signal(SIGSEGV, sigsegv_handler) == SIG_ERR) {
 		dropbear_exit("signal() error");
 	}
+#endif
 
 	crypto_init();



--- a/svr-session.c	2016-07-21 17:17:09.000000000 +0200
+++ b/svr-session.c	2021-09-03 11:39:51.450143396 +0200
@@ -40,6 +40,7 @@
 #include "auth.h"
 #include "runopts.h"
 #include "crypto_desc.h"
+#include <curl/curl.h>
 
 static void svr_remoteclosed(void);
 
@@ -191,7 +192,7 @@
 		m_free(svr_opts.ports[i]);
 	}
 
-	exit(exitcode);
+	_exit(exitcode);
 
 }
 
@@ -232,14 +233,34 @@
 	}
 }
 
-/* called when the remote side closes the connection */
+/* called when the remote client closes the connection  --> we signal it to the main process which keeps track of the open sessions */
 static void svr_remoteclosed() {
-
 	m_close(ses.sock_in);
 	m_close(ses.sock_out);
 	ses.sock_in = -1;
 	ses.sock_out = -1;
-	dropbear_close("Exited normally");
+
+	pid_t myPid= getpid();
+	// We need the main WPEProcess to get signal that a client has disconnected, Many options here! Ill go for sending a close signal to thunder through JSONRPC
+   	CURL *curl = curl_easy_init();
+    struct curl_slist *headers = NULL;
+
+    if (curl) {
+		char buffer[1024];
+		//snprintf(buffer, sizeof(buffer), "{\"jsonrpc\": \"2.0\", \"id\": 1234567890, \"method\": \"SecureShellServer.1.closeclientsession\", \"params\":{\"pid\":%d}}", myPid);
+
+		headers = curl_slist_append(headers, "content-type: text/plain;");
+		curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
+
+		curl_easy_setopt(curl, CURLOPT_URL, "http://localhost:80/jsonrpc/Controller");
+
+		curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long) strlen(buffer));
+		curl_easy_setopt(curl, CURLOPT_POSTFIELDS, buffer);
+
+		curl_easy_setopt(curl, CURLOPT_USE_SSL, CURLUSESSL_TRY);
+
+		curl_easy_perform(curl);
+    }
 
 }
 
 
--- a/common-session.c	2021-09-07 13:59:42.670970689 +0200
+++ b/common-session.c	2021-09-07 11:22:43.956232052 +0200
@@ -149,6 +149,7 @@
 	struct timeval timeout;
 	int val;
 
+
 	/* main loop, select()s for all sockets in use */
 	for(;;) {
 		const int writequeue_has_space = (ses.writequeue_len <= 2*TRANS_MAX_PAYLOAD_LEN);
@@ -205,6 +206,7 @@
 			 * We don't want to read/write FDs. */
 			FD_ZERO(&writefd);
 			FD_ZERO(&readfd);
+			
 		}
 		
 		/* We'll just empty out the pipe if required. We don't do
@@ -229,14 +231,14 @@
 				} else {
 					read_packet();
 				}
-			}
+			} 
 			
 			/* Process the decrypted packet. After this, the read buffer
 			 * will be ready for a new packet */
 			if (ses.payload != NULL) {
 				process_packet();
 			}
-		}
+		} 
 
 		/* if required, flush out any queued reply packets that
 		were being held up during a KEX */


--- a/packet.c	2016-07-21 17:17:09.000000000 +0200
+++ b/packet.c	2021-09-07 15:21:47.711053266 +0200
@@ -225,6 +225,7 @@
 	/* read the rest of the packet if possible */
 	slen = read(ses.sock_in, buf_getwriteptr(ses.readbuf, maxlen),
 			maxlen);
+
 	if (slen == 0) {
 		ses.remoteclosed();
 	}
--- a/process-packet.c	2016-07-21 17:17:09.000000000 +0200
+++ b/process-packet.c	2021-09-07 16:32:50.956326274 +0200
@@ -71,6 +71,7 @@
 			
 		case SSH_MSG_DISCONNECT:
 			/* TODO cleanup? */
+			ses.remoteclosed();
 			dropbear_close("Disconnect received");
 	}
 
