diff -aurN gst-plugins-bad-1.16.1/ext/wayland/gstwaylandsink.c gst-plugins-bad-1.16.1-mod/ext/wayland/gstwaylandsink.c
--- gst-plugins-bad-1.16.1/ext/wayland/gstwaylandsink.c	2021-07-28 08:25:03.936860644 -0700
+++ gst-plugins-bad-1.16.1-mod/ext/wayland/gstwaylandsink.c	2021-07-28 08:25:02.617110036 -0700
@@ -62,7 +62,8 @@
 {
   PROP_0,
   PROP_DISPLAY,
-  PROP_FULLSCREEN
+  PROP_FULLSCREEN,
+  PROP_WINDOW_SET
 };
 
 GST_DEBUG_CATEGORY (gstwayland_debug);
@@ -208,6 +209,12 @@
       g_param_spec_boolean ("fullscreen", "Fullscreen",
           "Whether the surface should be made fullscreen ", FALSE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  g_object_class_install_property (G_OBJECT_CLASS (klass), PROP_WINDOW_SET,
+       g_param_spec_string ("rectangle", "rectangle",
+           "Window Set Format: x,y,width,height",
+           NULL, G_PARAM_WRITABLE));
+
 }
 
 static void
@@ -269,6 +276,36 @@
       gst_wayland_sink_set_fullscreen (sink, g_value_get_boolean (value));
       GST_OBJECT_UNLOCK (sink);
       break;
+    case PROP_WINDOW_SET:
+    {
+      const gchar *str= g_value_get_string(value);
+      gchar **parts= g_strsplit(str, ",", 4);
+
+      if ( !parts[0] || !parts[1] || !parts[2] || !parts[3] ) {
+        GST_ERROR( "Bad window properties string" );
+      } else {
+        int nx, ny, nw, nh;
+        nx= atoi( parts[0] );
+        ny= atoi( parts[1] );
+        nw= atoi( parts[2] );
+        nh= atoi( parts[3] );
+
+        if ( sink->window ) {
+	  if ( (sink->window->configured == TRUE) &&
+  	       ((nx != sink->windowX) ||
+               (ny != sink->windowY) ||
+               (nw != sink->windowWidth) ||
+               (nh != sink->windowHeight)) ) {
+             sink->windowX= nx;
+             sink->windowY= ny;
+             sink->windowWidth= nw;
+             sink->windowHeight= nh;
+             gst_wl_window_set_render_rectangle(sink->window, nx, ny, nw, nh);
+	   }
+	}
+      }
+      break;
+    }
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -912,6 +949,7 @@
 static void
 gst_wayland_sink_set_window_handle (GstVideoOverlay * overlay, guintptr handle)
 {
+#if 0
   GstWaylandSink *sink = GST_WAYLAND_SINK (overlay);
   struct wl_surface *surface = (struct wl_surface *) handle;
 
@@ -949,6 +987,7 @@
   }
 
   g_mutex_unlock (&sink->render_lock);
+#endif
 }
 
 static void
diff -aurN gst-plugins-bad-1.16.1/ext/wayland/gstwaylandsink.h gst-plugins-bad-1.16.1-mod/ext/wayland/gstwaylandsink.h
--- gst-plugins-bad-1.16.1/ext/wayland/gstwaylandsink.h	2019-04-19 02:16:36.000000000 -0700
+++ gst-plugins-bad-1.16.1-mod/ext/wayland/gstwaylandsink.h	2021-07-28 07:36:55.371732524 -0700
@@ -62,6 +62,11 @@
   GstVideoInfo video_info;
   gboolean fullscreen;
 
+  gint windowX;
+  gint windowY;
+  gint windowWidth;
+  gint windowHeight;
+
   gchar *display_name;
 
   gboolean redraw_pending;
