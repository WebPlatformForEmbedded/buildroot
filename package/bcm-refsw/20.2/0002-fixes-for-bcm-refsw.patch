diff --git a/BSEAV/lib/gpu/include/EGL/eglplatform.h b/BSEAV/lib/gpu/include/EGL/eglplatform.h
index b71c2d19a..2e9fe7f2e 100644
--- a/BSEAV/lib/gpu/include/EGL/eglplatform.h
+++ b/BSEAV/lib/gpu/include/EGL/eglplatform.h
@@ -95,6 +95,8 @@ typedef void*                           EGLNativeDisplayType;
 
 #elif defined(__unix__)
 
+#define BROADCOM_PLATFORM 1
+
 #ifdef BROADCOM_PLATFORM
 
 typedef void *EGLNativeDisplayType;
diff --git a/BSEAV/lib/gpu/vc5/platform/nexus/platform_nexus_common.mk b/BSEAV/lib/gpu/vc5/platform/nexus/platform_nexus_common.mk
index fc37e4408..8a7c0121b 100644
--- a/BSEAV/lib/gpu/vc5/platform/nexus/platform_nexus_common.mk
+++ b/BSEAV/lib/gpu/vc5/platform/nexus/platform_nexus_common.mk
@@ -82,7 +82,6 @@ CFLAGS += \
 	-mfpu=neon
 endif
 
-LDFLAGS += -Wl,--no-undefined
 LDFLAGS += -L$(V3DDRIVER_LIB_TARGET) -lv3ddriver -lpthread
 
 ifeq ($(V3D_DEBUG),y)
@@ -135,9 +134,7 @@ OUTDIR :
 
 .phony: V3DDriver
 V3DDriver:
-	$(Q)$(MAKE) --no-print-directory -C $(V3D_DIR) -f V3DDriver.mk \
-	OBJDIR=$(V3DDRIVER_OBJ_TARGET) LIBDIR=$(V3DDRIVER_LIB_TARGET) \
-	NEXUS_BIN_DIR=$(NEXUS_BIN_DIR) $(MAKECMDGOALS)
+	$(Q)$(MAKE) --no-print-directory -C $(V3D_DIR) -f V3DDriver.mk $(MAKECMDGOALS)
 
 # $(1) = src
 # $(2) = obj
diff --git a/magnum/basemodules/dbg/bdbg.h b/magnum/basemodules/dbg/bdbg.h
index db4f40495..fa9046659 100644
--- a/magnum/basemodules/dbg/bdbg.h
+++ b/magnum/basemodules/dbg/bdbg.h
@@ -957,7 +957,7 @@ See Also:
 #else
 #define BDBG_ASSERT(expr) (expr) ? (void) 0 : BDBG_P_AssertFailed(#expr, BSTD_FILE, BSTD_LINE)
 #endif
-#define BDBG_CASSERT(expr) do switch(0){case 0: case (expr):;} while(0)
+#define BDBG_CASSERT(expr) do switch(0){case (expr):;} while(0)
 #define BDBG_CWARNING(expr) do {if(0){int unused = 1/(expr);unused++;}} while(0)
 #define BDBG_CWARNING_EXPR(expr) ((1/(expr)) ? 0 : 0)
 
diff --git a/nexus/nxclient/apps/Makefile b/nexus/nxclient/apps/Makefile
index 8b46518ce..2d2055625 100644
--- a/nexus/nxclient/apps/Makefile
+++ b/nexus/nxclient/apps/Makefile
@@ -52,7 +52,6 @@ BASIC_BUILD_APPS = \
 	audio_fade \
 	audio_fade_toggle \
 	audio_karaoke \
-    audio_presentation \
 	audio_wav_convert \
 	best_effort_bvn_status \
 	blit_client \
diff --git a/nexus/nxclient/server/nxserverlib.c b/nexus/nxclient/server/nxserverlib.c
index aeae7d977..49a934f24 100644
--- a/nexus/nxclient/server/nxserverlib.c
+++ b/nexus/nxclient/server/nxserverlib.c
@@ -1194,6 +1194,33 @@ int nxserverlib_set_server_alpha(nxclient_t client, unsigned alpha)
     return 0;
 }
 
+int nxserverlib_set_server_position(nxclient_t client, NEXUS_Rect rect)
+{
+    NEXUS_SurfaceCompositorClientSettings client_settings;
+    NEXUS_Error rc;
+    struct b_req *req;
+
+    for (req = BLST_D_FIRST(&client->requests); req; req = BLST_D_NEXT(req, link)) {
+        unsigned i;
+        for (i=0;i<NXCLIENT_MAX_IDS;i++) {
+            if (!req->results.surfaceClient[i].id) continue;
+
+            BDBG_OBJECT_ASSERT(client, b_client);
+            NEXUS_SurfaceCompositor_GetClientSettings(client->session->surfaceCompositor, req->handles.surfaceClient[i].handle, &client_settings);
+
+            client_settings.composition.position.x = rect.x;
+            client_settings.composition.position.y = rect.y;
+            client_settings.composition.position.width = rect.width;
+            client_settings.composition.position.height = rect.height;
+
+            rc = NEXUS_SurfaceCompositor_SetClientSettings(client->session->surfaceCompositor, req->handles.surfaceClient[i].handle, &client_settings);
+            if (rc) return BERR_TRACE(rc);
+        }
+    }
+
+    return 0;
+}
+
 static NEXUS_DisplayHandle b_get_vbi_display(struct b_session *session)
 {
     return session->display[1].display ? session->display[1].display : session->display[0].display;
@@ -4080,6 +4107,11 @@ void nxserverlib_get_settings(nxserver_t server, struct nxserver_settings *setti
 }
 
 nxserver_t nxserverlib_init(const struct nxserver_settings *settings)
+{
+    return (nxserverlib_init_extended(settings, true));
+}
+
+nxserver_t nxserverlib_init_extended(const struct nxserver_settings *settings, const bool authorizedOnly)
 {
     NEXUS_PlatformStartServerSettings serverSettings;
     NEXUS_Error rc;
@@ -4154,7 +4186,7 @@ nxserver_t nxserverlib_init(const struct nxserver_settings *settings)
     BKNI_ReleaseMutex(server->settings.lock);
 
     NEXUS_Platform_GetDefaultStartServerSettings(&serverSettings);
-    serverSettings.allowUnauthenticatedClients = false;
+    serverSettings.allowUnauthenticatedClients = !authorizedOnly;
     rc = NEXUS_Platform_StartServer(&serverSettings);
     BDBG_ASSERT(!rc);
 
diff --git a/nexus/nxclient/server/nxserverlib.h b/nexus/nxclient/server/nxserverlib.h
index f7457a3a1..63184fd94 100644
--- a/nexus/nxclient/server/nxserverlib.h
+++ b/nexus/nxclient/server/nxserverlib.h
@@ -362,6 +362,7 @@ struct nxserver_cmdline_settings
 /* nxserver_lib.c API */
 void nxserver_get_default_settings(struct nxserver_settings *settings);
 nxserver_t nxserverlib_init(const struct nxserver_settings *settings);
+nxserver_t nxserverlib_init_extended(const struct nxserver_settings *settings, const bool authorizedOnly);
 void nxserverlib_uninit(nxserver_t server);
 struct b_session *nxserver_get_client_session(nxclient_t client);
 /* get_singleton is used for nxclient local to use externally opened nxserverlib */
@@ -372,6 +373,7 @@ void nxserverlib_get_settings(nxserver_t server, struct nxserver_settings *setti
 int nxserverlib_send_input(nxclient_t client, unsigned inputClientId, const NEXUS_InputRouterCode *pCode);
 #endif
 int nxserverlib_set_server_alpha(nxclient_t client, unsigned alpha);
+int nxserverlib_set_server_position(nxclient_t client, NEXUS_Rect rect);
 #if NEXUS_HAS_ASTM
 /* modify the system defaults for ASTM */
 void nxserverlib_get_astm_settings(NEXUS_AstmSettings *pSettings);
