diff --git a/src/third_party/starboard/wpe/shared/libraries.gypi b/src/third_party/starboard/wpe/shared/libraries.gypi
index 6cf559559..f8e5a5d8c 100644
--- a/src/third_party/starboard/wpe/shared/libraries.gypi
+++ b/src/third_party/starboard/wpe/shared/libraries.gypi
@@ -15,6 +15,7 @@
   'variables': {
     'has_ocdm': '<!(echo $COBALT_HAS_OCDM)',
     'has_provision': '<!(echo $COBALT_HAS_PROVISION)',
+    'has_waylandsink': '<!(echo $COBALT_HAS_WAYLANDSINK)',
     'common_libs': [
       '-lpthread',
     ],
@@ -45,6 +46,11 @@
           'provisionproxy',
         ],
       }],
+      ['<(has_waylandsink)==1', {
+          'common_libs': [
+            '-lgstwayland-1.0',
+          ],
+      }],
     ],
   },
 }
diff --git a/src/third_party/starboard/wpe/shared/player/player_internal.cc b/src/third_party/starboard/wpe/shared/player/player_internal.cc
index 097399cf1..2f6e8da27 100644
--- a/src/third_party/starboard/wpe/shared/player/player_internal.cc
+++ b/src/third_party/starboard/wpe/shared/player/player_internal.cc
@@ -10,6 +10,11 @@
 #include <gst/gst.h>
 #include <gst/video/videooverlay.h>
 
+#if defined(WAYLAND_SINK)
+#include <gst/wayland/wayland.h>
+#include <wayland-egl-backend.h>
+#endif
+
 #include <map>
 #include <string>
 
@@ -921,7 +926,9 @@ PlayerImpl::PlayerImpl(SbPlayer player,
 
   GstBus* bus = gst_pipeline_get_bus(GST_PIPELINE(pipeline_));
   bus_watch_id_ = gst_bus_add_watch(bus, &PlayerImpl::BusMessageCallback, this);
+#if defined(SB_NEEDS_VIDEO_OVERLAY_SURFACE)
   gst_bus_set_sync_handler(bus, &PlayerImpl::CreateVideoOverlay, this, nullptr);
+#endif
   gst_object_unref(bus);
 
   video_appsrc_ = gst_element_factory_make("appsrc", "vidsrc");
@@ -1137,24 +1144,43 @@ gboolean PlayerImpl::BusMessageCallback(GstBus* bus,
 GstBusSyncReply PlayerImpl::CreateVideoOverlay(GstBus* bus,
                                                GstMessage* message,
                                                gpointer user_data) {
-  if (!gst_is_video_overlay_prepare_window_handle_message(message))
-    return GST_BUS_PASS;
-
   PlayerImpl* self = reinterpret_cast<PlayerImpl*>(user_data);
-  GstVideoOverlay* overlay = GST_VIDEO_OVERLAY(GST_MESSAGE_SRC(message));
   SbWindowPrivate* window_private = self->window_;
-  self->video_overlay_ = window_private->CreateVideoOverlay();
-  gst_video_overlay_set_window_handle(overlay,
-                                      (guintptr)self->video_overlay_->Native());
-
-  self->gst_video_overlay_ = GST_ELEMENT(overlay);
-  GST_INFO("Has video overlay");
-  if (!self->pending_bounds_.IsEmpty()) {
-    self->SetBounds(0, self->pending_bounds_.x, self->pending_bounds_.y,
-                    self->pending_bounds_.w, self->pending_bounds_.h);
-    self->pending_bounds_ = PendingBounds{};
-  }
-  return GST_BUS_DROP;
+#if defined(WAYLAND_SINK)
+  if (gst_is_wayland_display_handle_need_context_message(message)) {
+     struct wl_display* display_handle = static_cast<struct wl_display *>(window_private->GetDisplay()->Native());
+     GstContext* context = gst_wayland_display_handle_context_new(display_handle);
+     gst_element_set_context(GST_ELEMENT(GST_MESSAGE_SRC(message)), context);
+
+    return GST_BUS_DROP;
+  } else
+#endif
+  {
+
+    if (gst_is_video_overlay_prepare_window_handle_message(message)) {
+
+      GstVideoOverlay* overlay = GST_VIDEO_OVERLAY(GST_MESSAGE_SRC(message));
+      self->video_overlay_ = window_private->CreateVideoOverlay();
+      if (self->video_overlay_) {
+#if defined(WAYLAND_SINK)
+          struct wl_egl_window* native = reinterpret_cast<struct wl_egl_window*>(self->video_overlay_->Native());
+          gst_video_overlay_set_window_handle(overlay, (guintptr)native->surface);
+#else
+          gst_video_overlay_set_window_handle(overlay, (guintptr)self->video_overlay_->Native());
+#endif
+          self->gst_video_overlay_ = GST_ELEMENT(overlay);
+          GST_INFO("Has video overlay");
+      }
+      if (!self->pending_bounds_.IsEmpty()) {
+        self->SetBounds(0, self->pending_bounds_.x, self->pending_bounds_.y,
+                        self->pending_bounds_.w, self->pending_bounds_.h);
+        self->pending_bounds_ = PendingBounds{};
+      }
+      return GST_BUS_DROP;
+    } else {
+      return GST_BUS_PASS;
+    }
+  }
 }
 
 // static
diff --git a/src/third_party/starboard/wpe/shared/sources.gypi b/src/third_party/starboard/wpe/shared/sources.gypi
index f9e5b4066..37e4cdf8c 100644
--- a/src/third_party/starboard/wpe/shared/sources.gypi
+++ b/src/third_party/starboard/wpe/shared/sources.gypi
@@ -15,6 +15,7 @@
   'variables': {
     'has_ocdm': '<!(echo $COBALT_HAS_OCDM)',
     'has_provision': '<!(echo $COBALT_HAS_PROVISION)',
+    'has_waylandsink': '<!(echo $COBALT_HAS_WAYLANDSINK)',
     'common_defines': [],
     'use_system_libjpeg': 1,
     'audio_sink_sources': [
@@ -480,6 +481,12 @@
           'HAS_PROVISION',
         ],
       }],
+      ['<(has_waylandsink)==1', {
+        'common_defines': [
+          'WAYLAND_SINK',
+          'GST_USE_UNSTABLE_API'
+        ],
+      }],
     ],
   },
 }
diff --git a/src/third_party/starboard/wpe/shared/window/window_internal.cc b/src/third_party/starboard/wpe/shared/window/window_internal.cc
index d60285933..6c0ebe350 100644
--- a/src/third_party/starboard/wpe/shared/window/window_internal.cc
+++ b/src/third_party/starboard/wpe/shared/window/window_internal.cc
@@ -533,16 +533,22 @@ SbWindowPrivate::SbWindowPrivate(const SbWindowOptions* options) {
   CreateDisplay();
 }
 
+WPEFramework::Compositor::IDisplay* SbWindowPrivate::GetDisplay() {
+  return third_party::starboard::wpe::shared::window::GetDisplay();
+}
+
 void SbWindowPrivate::CreateDisplay() {
 
 #if defined(SB_NEEDS_VIDEO_OVERLAY_SURFACE)
   // The sufraces are stacked in order they are
   // created with by default so make sure video is under gfx by creating
   // it first.
+#if !defined(WAYLAND_SINK)
   video_overlay_ =
       third_party::starboard::wpe::shared::window::GetDisplay()->Create(
           third_party::starboard::wpe::shared::window::DisplayName() + ":"
               + std::string("video"), window_width_, window_height_);
+#endif
 #endif
 
   auto* display = third_party::starboard::wpe::shared::window::GetDisplay();
@@ -579,7 +585,11 @@ void SbWindowPrivate::DestroyDisplay() {
 
 WPEFramework::Compositor::IDisplay::ISurface*
 SbWindowPrivate::CreateVideoOverlay() {
+#if defined(WAYLAND_SINK)
+  return window_;
+#else
   return video_overlay_;
+#endif
 }
 
 void SbWindowPrivate::DestroyVideoOverlay(
diff --git a/src/third_party/starboard/wpe/shared/window/window_internal.h b/src/third_party/starboard/wpe/shared/window/window_internal.h
index 8a04cfcc2..9d39cfcc4 100644
--- a/src/third_party/starboard/wpe/shared/window/window_internal.h
+++ b/src/third_party/starboard/wpe/shared/window/window_internal.h
@@ -84,6 +84,7 @@ struct SbWindowPrivate {
   SbWindowPrivate(const SbWindowOptions* options);
   ~SbWindowPrivate();
 
+  WPEFramework::Compositor::IDisplay* GetDisplay();
   void CreateDisplay();
   void DestroyDisplay();
   void PollNextSystemEvent();
