diff --git a/src/third_party/starboard/wpe/shared/libraries.gypi b/src/third_party/starboard/wpe/shared/libraries.gypi
index 6cf559559..f8e5a5d8c 100644
--- a/src/third_party/starboard/wpe/shared/libraries.gypi
+++ b/src/third_party/starboard/wpe/shared/libraries.gypi
@@ -15,6 +15,7 @@
   'variables': {
     'has_ocdm': '<!(echo $COBALT_HAS_OCDM)',
     'has_provision': '<!(echo $COBALT_HAS_PROVISION)',
+    'has_waylandsink': '<!(echo $COBALT_HAS_WAYLANDSINK)',
     'common_libs': [
       '-lpthread',
     ],
@@ -45,6 +46,11 @@
           'provisionproxy',
         ],
       }],
+      ['<(has_waylandsink)==1', {
+          'common_libs': [
+            '-lgstwayland-1.0',
+          ],
+      }],
     ],
   },
 }
diff --git a/src/third_party/starboard/wpe/shared/player/player_internal.cc b/src/third_party/starboard/wpe/shared/player/player_internal.cc
index b5c9b1f0c..b0174e8e1 100644
--- a/src/third_party/starboard/wpe/shared/player/player_internal.cc
+++ b/src/third_party/starboard/wpe/shared/player/player_internal.cc
@@ -762,9 +762,14 @@ class PlayerImpl : public Player, public DrmSystemOcdm::Observer {
   static void ElementAdded(GstElement* pipeline,
                            GstElement* element,
                            PlayerImpl* self);
+
+#if defined(SB_NEEDS_VIDEO_OVERLAY_SURFACE)
+#if !defined(WAYLAND_SINK)
   static GstBusSyncReply CreateVideoOverlay(GstBus* bus,
                                             GstMessage* message,
                                             gpointer user_data);
+#endif
+#endif
   bool ChangePipelineState(GstState state) const;
   void DispatchOnWorkerThread(Task* task) const;
   gint64 GetPosition() const;
@@ -911,6 +916,16 @@ PlayerImpl::PlayerImpl(SbPlayer player,
 
 #endif
 
+#if defined(WAYLAND_SINK)
+
+  GstElement* video_sink = gst_element_factory_make("waylandsink",
+      NULL);
+  g_object_set(pipeline_, "video-sink", video_sink, NULL);
+  std::string videoDisplayName = window_->DisplayName() + ":video";
+  g_object_set(video_sink, "window", videoDisplayName.c_str(), NULL);
+
+#endif
+
 #if defined(BRCMVIDEOSINK)
 
   GstElement* video_sink = gst_element_factory_make("brcmvideosink",
@@ -921,7 +936,11 @@ PlayerImpl::PlayerImpl(SbPlayer player,
 
   GstBus* bus = gst_pipeline_get_bus(GST_PIPELINE(pipeline_));
   bus_watch_id_ = gst_bus_add_watch(bus, &PlayerImpl::BusMessageCallback, this);
+#if defined(SB_NEEDS_VIDEO_OVERLAY_SURFACE)
+#if !defined(WAYLAND_SINK)
   gst_bus_set_sync_handler(bus, &PlayerImpl::CreateVideoOverlay, this, nullptr);
+#endif
+#endif
   gst_object_unref(bus);
 
   video_appsrc_ = gst_element_factory_make("appsrc", "vidsrc");
@@ -1134,6 +1153,8 @@ gboolean PlayerImpl::BusMessageCallback(GstBus* bus,
 }
 
 // static
+#if defined(SB_NEEDS_VIDEO_OVERLAY_SURFACE)
+#if !defined(WAYLAND_SINK)
 GstBusSyncReply PlayerImpl::CreateVideoOverlay(GstBus* bus,
                                                GstMessage* message,
                                                gpointer user_data) {
@@ -1144,11 +1165,13 @@ GstBusSyncReply PlayerImpl::CreateVideoOverlay(GstBus* bus,
   GstVideoOverlay* overlay = GST_VIDEO_OVERLAY(GST_MESSAGE_SRC(message));
   SbWindowPrivate* window_private = self->window_;
   self->video_overlay_ = window_private->CreateVideoOverlay();
-  gst_video_overlay_set_window_handle(overlay,
+  if (self->video_overlay_) {
+      gst_video_overlay_set_window_handle(overlay,
                                       (guintptr)self->video_overlay_->Native());
 
-  self->gst_video_overlay_ = GST_ELEMENT(overlay);
-  GST_INFO("Has video overlay");
+      self->gst_video_overlay_ = GST_ELEMENT(overlay);
+      GST_INFO("Has video overlay");
+  }
   if (!self->pending_bounds_.IsEmpty()) {
     self->SetBounds(0, self->pending_bounds_.x, self->pending_bounds_.y,
                     self->pending_bounds_.w, self->pending_bounds_.h);
@@ -1156,6 +1179,8 @@ GstBusSyncReply PlayerImpl::CreateVideoOverlay(GstBus* bus,
   }
   return GST_BUS_DROP;
 }
+#endif
+#endif
 
 // static
 void* PlayerImpl::ThreadEntryPoint(void* context) {
diff --git a/src/third_party/starboard/wpe/shared/sources.gypi b/src/third_party/starboard/wpe/shared/sources.gypi
index f9e5b4066..37e4cdf8c 100644
--- a/src/third_party/starboard/wpe/shared/sources.gypi
+++ b/src/third_party/starboard/wpe/shared/sources.gypi
@@ -15,6 +15,7 @@
   'variables': {
     'has_ocdm': '<!(echo $COBALT_HAS_OCDM)',
     'has_provision': '<!(echo $COBALT_HAS_PROVISION)',
+    'has_waylandsink': '<!(echo $COBALT_HAS_WAYLANDSINK)',
     'common_defines': [],
     'use_system_libjpeg': 1,
     'audio_sink_sources': [
@@ -480,6 +481,12 @@
           'HAS_PROVISION',
         ],
       }],
+      ['<(has_waylandsink)==1', {
+        'common_defines': [
+          'WAYLAND_SINK',
+          'GST_USE_UNSTABLE_API'
+        ],
+      }],
     ],
   },
 }
diff --git a/src/third_party/starboard/wpe/shared/window/window_internal.cc b/src/third_party/starboard/wpe/shared/window/window_internal.cc
index d60285933..835ce3d8d 100644
--- a/src/third_party/starboard/wpe/shared/window/window_internal.cc
+++ b/src/third_party/starboard/wpe/shared/window/window_internal.cc
@@ -533,16 +533,22 @@ SbWindowPrivate::SbWindowPrivate(const SbWindowOptions* options) {
   CreateDisplay();
 }
 
+std::string SbWindowPrivate::DisplayName() {
+    return third_party::starboard::wpe::shared::window::DisplayName();
+}
+
 void SbWindowPrivate::CreateDisplay() {
 
 #if defined(SB_NEEDS_VIDEO_OVERLAY_SURFACE)
   // The sufraces are stacked in order they are
   // created with by default so make sure video is under gfx by creating
   // it first.
+#if !defined(WAYLAND_SINK)
   video_overlay_ =
       third_party::starboard::wpe::shared::window::GetDisplay()->Create(
           third_party::starboard::wpe::shared::window::DisplayName() + ":"
               + std::string("video"), window_width_, window_height_);
+#endif
 #endif
 
   auto* display = third_party::starboard::wpe::shared::window::GetDisplay();
@@ -579,7 +585,11 @@ void SbWindowPrivate::DestroyDisplay() {
 
 WPEFramework::Compositor::IDisplay::ISurface*
 SbWindowPrivate::CreateVideoOverlay() {
+#if defined(WAYLAND_SINK)
+  return window_;
+#else
   return video_overlay_;
+#endif
 }
 
 void SbWindowPrivate::DestroyVideoOverlay(
diff --git a/src/third_party/starboard/wpe/shared/window/window_internal.h b/src/third_party/starboard/wpe/shared/window/window_internal.h
index 107b974ff..790e1e093 100644
--- a/src/third_party/starboard/wpe/shared/window/window_internal.h
+++ b/src/third_party/starboard/wpe/shared/window/window_internal.h
@@ -83,6 +83,7 @@ struct SbWindowPrivate {
   SbWindowPrivate(const SbWindowOptions* options);
   ~SbWindowPrivate();
 
+  std::string DisplayName();
   void CreateDisplay();
   void DestroyDisplay();
   void PollNextSystemEvent();
