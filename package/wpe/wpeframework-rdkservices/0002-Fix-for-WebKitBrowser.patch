diff -Naur rdkservices.orig/WebKitBrowser/Apps.config rdkservices/WebKitBrowser/Apps.config
--- rdkservices.orig/WebKitBrowser/Apps.config	2022-12-19 17:38:11.000000000 +0000
+++ rdkservices/WebKitBrowser/Apps.config	2023-01-30 13:20:05.484879026 +0000
@@ -15,7 +15,6 @@
 map()
     kv(url "about:blank")
     if(PLUGIN_APPS_USERAGENT)
-        semicolon_safe_string(PLUGIN_APPS_USERAGENT)
         kv(useragent ${PLUGIN_APPS_USERAGENT})
     endif()
     if(NOT WEBKIT_GLIB_API)
diff -Naur rdkservices.orig/WebKitBrowser/UX.config rdkservices/WebKitBrowser/UX.config
--- rdkservices.orig/WebKitBrowser/UX.config	2022-12-19 17:38:11.000000000 +0000
+++ rdkservices/WebKitBrowser/UX.config	2023-01-30 13:20:05.484879026 +0000
@@ -21,7 +21,6 @@
 map()
     kv(url "about:blank")
     if(PLUGIN_UX_USERAGENT)
-        semicolon_safe_string(PLUGIN_UX_USERAGENT)
         kv(useragent ${PLUGIN_UX_USERAGENT})
     endif()
     if(NOT WEBKIT_GLIB_API)
diff -Naur rdkservices.orig/WebKitBrowser/WebKitBrowser.config rdkservices/WebKitBrowser/WebKitBrowser.config
--- rdkservices.orig/WebKitBrowser/WebKitBrowser.config	2022-12-19 17:38:11.000000000 +0000
+++ rdkservices/WebKitBrowser/WebKitBrowser.config	2023-01-30 13:20:05.484879026 +0000
@@ -30,7 +30,6 @@
 map()
     kv(url ${PLUGIN_WEBKITBROWSER_STARTURL})
     if(PLUGIN_WEBKITBROWSER_USERAGENT)
-        semicolon_safe_string(PLUGIN_WEBKITBROWSER_USERAGENT)
         kv(useragent ${PLUGIN_WEBKITBROWSER_USERAGENT})
     endif()
     if(NOT WEBKIT_GLIB_API)
diff -Naur rdkservices.orig/WebKitBrowser/WebKitImplementation.cpp rdkservices/WebKitBrowser/WebKitImplementation.cpp
--- rdkservices.orig/WebKitBrowser/WebKitImplementation.cpp	2022-12-19 17:38:11.000000000 +0000
+++ rdkservices/WebKitBrowser/WebKitImplementation.cpp	2023-01-30 13:20:05.484879026 +0000
@@ -2340,7 +2340,9 @@
               webkit_settings_set_enable_spatial_navigation(preferences, _config.SpatialNavigation.Value());
               webkit_settings_set_enable_tabs_to_links(preferences, _config.SpatialNavigation.Value());
             }
+#if 0
             webkit_settings_set_allow_scripts_to_close_windows(preferences, _config.AllowWindowClose.Value());
+#endif
             webkit_settings_set_enable_non_composited_webgl(preferences, _config.NonCompositedWebGLEnabled.Value());
 
             // Media Content Types Requiring Hardware Support
@@ -2727,6 +2729,7 @@
 
         void CheckWebProcess()
         {
+#if 0
             if ( _webProcessCheckInProgress )
                 return;
 
@@ -2751,10 +2754,12 @@
                     object->DidReceiveWebProcessResponsivenessReply(isWebProcessResponsive);
                 });
 #endif
+#endif
         }
 
         void DidReceiveWebProcessResponsivenessReply(bool isWebProcessResponsive)
         {
+#if 0
             if (_config.WatchDogHangThresholdInSeconds.Value() == 0 || _config.WatchDogCheckTimeoutInSeconds.Value() == 0)
                 return;
 
@@ -2817,11 +2822,13 @@
             } else if (_unresponsiveReplyNum == (2 * kWebProcessUnresponsiveReplyDefaultLimit)) {
                 DeactivateBrowser(PluginHost::IShell::WATCHDOG_EXPIRED);
             }
+#endif
         }
 
 #ifdef WEBKIT_GLIB_API
         static void isWebProcessResponsiveCallback(WebKitWebView*, GParamSpec*, WebKitImplementation* self)
         {
+#if 0
             if (webkit_web_view_get_is_web_process_responsive(self->_view) == true) {
 
                 if (self->_unresponsiveReplyNum > 0) {
@@ -2832,6 +2839,7 @@
                     self->_unresponsiveReplyNum = 0;
                 }
             }
+#endif
         }
 #else
         static void WebProcessDidBecomeResponsive(WKPageRef page, const void* clientInfo)
diff -Naur rdkservices.orig/WebKitBrowser/YouTube.config rdkservices/WebKitBrowser/YouTube.config
--- rdkservices.orig/WebKitBrowser/YouTube.config	2022-12-19 17:38:11.000000000 +0000
+++ rdkservices/WebKitBrowser/YouTube.config	2023-01-30 13:20:46.085951563 +0000
@@ -21,7 +21,6 @@
 map()
     kv(url "${PLUGIN_YOUTUBE_STARTURL}${PLUGIN_YOUTUBE_STARTURL_QUERYSTRING}")
     if(PLUGIN_YOUTUBE_USERAGENT)
-        semicolon_safe_string(PLUGIN_YOUTUBE_USERAGENT)
         kv(useragent ${PLUGIN_YOUTUBE_USERAGENT})
     endif()
     if(NOT WEBKIT_GLIB_API)
