diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/cmake/FindNEXUS.cmake OCDM-Playready-Nexus-SVP.gerrit/cmake/FindNEXUS.cmake
--- OCDM-Playready-Nexus-SVP.gerrit.orig/cmake/FindNEXUS.cmake	1970-01-01 05:30:00.000000000 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/cmake/FindNEXUS.cmake	2022-12-08 23:27:38.511009627 +0530
@@ -0,0 +1,83 @@
+# - Try to find Broadcom Nexus.
+# Once done this will define
+#  NEXUS_FOUND  - System has Nexus
+#  NEXUS::NEXUS - The Nexus library
+#
+# Copyright (C) 2019 Metrological B.V
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1.  Redistributions of source code must retain the above copyright
+#     notice, this list of conditions and the following disclaimer.
+# 2.  Redistributions in binary form must reproduce the above copyright
+#     notice, this list of conditions and the following disclaimer in the
+#     documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS
+# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS
+# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+find_path(LIBNEXUS_INCLUDE nexus_config.h
+        PATH_SUFFIXES refsw)
+
+find_library(LIBNEXUS_LIBRARY nexus)
+
+if(EXISTS "${LIBNEXUS_LIBRARY}")
+    set(NEXUS_FOUND TRUE)
+    
+    find_library(LIBB_OS_LIBRARY b_os)
+
+    find_library(LIBNEXUS_CLIENT_LIBRARY nexus_client)
+
+    find_library(LIBNXCLIENT_LIBRARY nxclient)
+
+    include(FindPackageHandleStandardArgs)
+
+    find_package_handle_standard_args(LIBNEXUS DEFAULT_MSG LIBNEXUS_INCLUDE LIBNEXUS_LIBRARY)
+
+    mark_as_advanced(LIBNEXUS_INCLUDE LIBNEXUS_LIBRARY)
+
+    if(NOT TARGET NEXUS::NEXUS)
+        add_library(NEXUS::NEXUS UNKNOWN IMPORTED)
+        set_target_properties(NEXUS::NEXUS PROPERTIES
+                IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+                INTERFACE_INCLUDE_DIRECTORIES "${LIBNEXUS_INCLUDE}"
+                    )
+
+        if(NOT EXISTS "${LIBNEXUS_CLIENT_LIBRARY}")
+            message(STATUS "Nexus in Proxy mode")
+            set_target_properties(NEXUS::NEXUS PROPERTIES
+                    IMPORTED_LOCATION "${LIBNEXUS_LIBRARY}"
+                    )
+        else()
+            message(STATUS "Nexus in Client mode")
+            set_target_properties(NEXUS::NEXUS PROPERTIES
+                    IMPORTED_LOCATION "${LIBNEXUS_CLIENT_LIBRARY}"
+                    )
+        endif()
+
+        if(NOT EXISTS "${LIBNXCLIENT_LIBRARY}")
+            set_target_properties(NEXUS::NEXUS PROPERTIES
+                    INTERFACE_COMPILE_DEFINITIONS NO_NXCLIENT
+                    )
+        endif()
+
+        if(EXISTS "${LIBB_OS_LIBRARY}")
+            set_target_properties(NEXUS::NEXUS PROPERTIES
+                    IMPORTED_LINK_INTERFACE_LIBRARIES "${LIBB_OS_LIBRARY}"
+                    )
+        endif()
+    endif()
+    set_target_properties(NEXUS::NEXUS PROPERTIES
+            INTERFACE_COMPILE_DEFINITIONS "PLATFORM_BRCM"
+            )
+endif()
diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/cmake/FindNXCLIENT.cmake OCDM-Playready-Nexus-SVP.gerrit/cmake/FindNXCLIENT.cmake
--- OCDM-Playready-Nexus-SVP.gerrit.orig/cmake/FindNXCLIENT.cmake	1970-01-01 05:30:00.000000000 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/cmake/FindNXCLIENT.cmake	2022-12-08 23:27:58.290694345 +0530
@@ -0,0 +1,51 @@
+# - Try to find Broadcom Nexus client.
+# Once done this will define
+#  NXCLIENT_FOUND     - System has a Nexus client
+#  NXCLIENT::NXCLIENT - The Nexus client library
+#
+# Copyright (C) 2019 Metrological B.V
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1.  Redistributions of source code must retain the above copyright
+#     notice, this list of conditions and the following disclaimer.
+# 2.  Redistributions in binary form must reproduce the above copyright
+#     notice, this list of conditions and the following disclaimer in the
+#     documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS
+# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS
+# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+find_path(LIBNXCLIENT_INCLUDE nexus_config.h
+        PATH_SUFFIXES refsw)
+
+find_library(LIBNXCLIENT_LIBRARY nxclient)
+
+if(EXISTS "${LIBNXCLIENT_LIBRARY}")
+    include(FindPackageHandleStandardArgs)
+
+    set(NXCLIENT_FOUND TRUE)
+
+    find_package_handle_standard_args(LIBNXCLIENT DEFAULT_MSG NXCLIENT_FOUND LIBNXCLIENT_INCLUDE LIBNXCLIENT_LIBRARY)
+    mark_as_advanced(LIBNXCLIENT_LIBRARY)
+
+    if(NOT TARGET NXCLIENT::NXCLIENT)
+        add_library(NXCLIENT::NXCLIENT UNKNOWN IMPORTED)
+        
+        set_target_properties(NXCLIENT::NXCLIENT PROPERTIES
+                IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+                IMPORTED_LOCATION "${LIBNXCLIENT_LIBRARY}"
+                INTERFACE_INCLUDE_DIRECTORIES "${LIBNXCLIENT_INCLUDE}"
+                )
+    endif()
+endif()
\ No newline at end of file
diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSession.cpp OCDM-Playready-Nexus-SVP.gerrit/MediaSession.cpp
--- OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSession.cpp	2022-12-08 15:54:27.201417306 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/MediaSession.cpp	2022-12-08 22:39:23.219794903 +0530
@@ -451,14 +451,12 @@
             playreadyInitData = initData;
         }
 
-        mDrmHeader.assign(playreadyInitData.begin(), playreadyInitData.end());
-        ChkDR(Drm_Content_SetProperty(m_poAppContext,
-                                      DRM_CSP_AUTODETECT_HEADER,
-                                      reinterpret_cast<const uint8_t *>(mDrmHeader.data()),
-                                      mDrmHeader.size()));
+        mDrmHeader.assign(playreadyInitData.cbegin(), playreadyInitData.cend());
+
+        ChkDR(SelectDrmHeader(m_poAppContext, mDrmHeader.size(), mDrmHeader.data()));
 
         // Generate a random media session ID.
-        ChkDR(Oem_Random_GetBytes(f_pOEMContext, (DRM_BYTE *)&oSessionID, sizeof(oSessionID)));
+        ChkDR(Oem_Random_GetBytes(m_poAppContext, (DRM_BYTE *)&oSessionID, sizeof(oSessionID)));
         ZEROMEM(m_rgchSessionID, sizeof(m_rgchSessionID));
         // Store the generated media session ID in base64 encoded form.
         ChkDR(DRM_B64_EncodeA((DRM_BYTE *)&oSessionID,
@@ -522,12 +520,6 @@
     DRM_DWORD cchSilentURL = 0;
 
     if(m_eKeyState == KEY_INIT){
-
-        // Set this session's DMR header in the PR3 app context.
-        if (SelectDrmHeader(m_poAppContext, mDrmHeader.size(), mDrmHeader.data()) != CDMi_SUCCESS) {
-            return false;
-        }
-
         // Try to figure out the size of the license acquisition
         // challenge to be returned.
         dr = Drm_LicenseAcq_GenerateChallenge(m_poAppContext,
@@ -590,6 +582,8 @@
             ChkDR(dr);
         }
 
+        ChkDR(SelectDrmHeader(m_poAppContext, mDrmHeader.size(), mDrmHeader.data()));
+
         // Supply a buffer to receive the license acquisition challenge.
         ChkDR(Drm_LicenseAcq_GenerateChallenge(m_poAppContext,
                                             g_rgpdstrRights,
@@ -648,8 +642,7 @@
 
     BKNI_Memset(&oLicenseResponse, 0, sizeof(oLicenseResponse));
 
-    // Set this session's DMR header in the PR3 app context.
-    SelectDrmHeader(m_poAppContext, mDrmHeader.size(), mDrmHeader.data());
+    ChkDR(SelectDrmHeader(m_poAppContext, mDrmHeader.size(), mDrmHeader.data()));
 
     LOGGER(LINFO_, "Processing license acquisition response...");
     ChkDR(Drm_LicenseAcq_ProcessResponse(m_poAppContext,
@@ -764,11 +757,11 @@
 CDMi_RESULT MediaKeySession::Decrypt(
         const uint8_t *f_pbSessionKey,
         uint32_t f_cbSessionKey,
-        const uint32_t *f_pdwSubSampleMapping,
-        uint32_t f_cdwSubSampleMapping,
+        const EncryptionScheme encryptionScheme,
+        const EncryptionPattern& pattern,
         const uint8_t *f_pbIV,
         uint32_t f_cbIV,
-        const uint8_t *payloadData,
+        uint8_t *payloadData,
         uint32_t payloadDataSize,
         uint32_t *f_pcbOpaqueClearContent,
         uint8_t **f_ppbOpaqueClearContent,
@@ -884,9 +877,10 @@
 
     cr = CDMi_SUCCESS;
 
-    // Return clear content.
+    // Copy and Return the Memory token in the incoming payload buffer.
     *f_pcbOpaqueClearContent = sizeof(m_TokenHandle);
-    *f_ppbOpaqueClearContent = reinterpret_cast<uint8_t*>(&m_TokenHandle);
+    *f_ppbOpaqueClearContent = payloadData;
+    memcpy(*f_ppbOpaqueClearContent, reinterpret_cast<uint8_t*>(&m_TokenHandle), sizeof(m_TokenHandle));
 
     NEXUS_MemoryBlock_Unlock(pNexusMemoryBlock);
     NEXUS_MemoryBlock_Free(pNexusMemoryBlock);
diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSessionExt.cpp OCDM-Playready-Nexus-SVP.gerrit/MediaSessionExt.cpp
--- OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSessionExt.cpp	2022-12-08 15:54:27.201417306 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/MediaSessionExt.cpp	2022-12-08 22:40:52.920447626 +0530
@@ -76,6 +76,10 @@
 {
     CallbackInfo * callbackInfo = static_cast<CallbackInfo *>(data);
 
+    // When a detached thread terminates, its resources are automatically released back to the system 
+    // (i.e. without the need for another thread to join with it).
+    pthread_detach(pthread_self());
+
     std::stringstream keyMessage;
     keyMessage << "{";
     keyMessage << "\"compressed-video\": " << callbackInfo->_compressedVideo << ",";
@@ -90,11 +94,9 @@
     std::string keyMessageStr = keyMessage.str();
     const uint8_t * messageBytes = reinterpret_cast<const uint8_t *>(keyMessageStr.c_str());
 
-    char urlBuffer[64];
-    strcpy(urlBuffer, "properties");
-    callbackInfo->_callback->OnKeyMessage(messageBytes, keyMessageStr.length() + 1, urlBuffer);
-
+    callbackInfo->_callback->OnKeyMessage(messageBytes, keyMessageStr.length() + 1, "properties");
     delete callbackInfo;
+
     return nullptr;
 }
 
diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSession.h OCDM-Playready-Nexus-SVP.gerrit/MediaSession.h
--- OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSession.h	2022-12-08 15:54:27.201417306 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/MediaSession.h	2022-12-08 22:37:12.450731352 +0530
@@ -46,8 +46,9 @@
 #pragma once
 
 #include "Module.h"
-#include "cdmi.h"
-#include <core/core.h>
+
+#include <interfaces/IDRM.h>
+
 #include <vector>
 
 #include <nexus_config.h>
@@ -157,11 +158,11 @@
     virtual CDMi_RESULT Decrypt(
         const uint8_t *f_pbSessionKey,
         uint32_t f_cbSessionKey,
-        const uint32_t *f_pdwSubSampleMapping,
-        uint32_t f_cdwSubSampleMapping,
+        const EncryptionScheme encryptionScheme,
+        const EncryptionPattern& pattern,
         const uint8_t *f_pbIV,
         uint32_t f_cbIV,
-        const uint8_t *f_pbData,
+        uint8_t *f_pbData,
         uint32_t f_cbData,
         uint32_t *f_pcbOpaqueClearContent,
         uint8_t **f_ppbOpaqueClearContent,
diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSystem.cpp OCDM-Playready-Nexus-SVP.gerrit/MediaSystem.cpp
--- OCDM-Playready-Nexus-SVP.gerrit.orig/MediaSystem.cpp	2022-12-08 15:54:27.201417306 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/MediaSystem.cpp	2022-12-08 22:36:30.562357382 +0530
@@ -43,10 +43,11 @@
  ###############################################################################
 */
 
-#include "cdmi.h"
+#include "Module.h"
+
 #include "MediaSession.h"
 
-#include <core/core.h>
+#include <interfaces/IDRM.h>
 #include <cryptalgo/cryptalgo.h>
 #include <plugins/plugins.h>
 
diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/Module.cpp OCDM-Playready-Nexus-SVP.gerrit/Module.cpp
--- OCDM-Playready-Nexus-SVP.gerrit.orig/Module.cpp	2022-12-08 15:54:27.201417306 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/Module.cpp	2022-12-08 22:35:11.357598319 +0530
@@ -18,6 +18,5 @@
  */
 
 #include "Module.h"
-#include <core/SystemInfo.h>
 
 MODULE_NAME_DECLARATION(BUILD_REFERENCE)
diff -Naur OCDM-Playready-Nexus-SVP.gerrit.orig/Module.h OCDM-Playready-Nexus-SVP.gerrit/Module.h
--- OCDM-Playready-Nexus-SVP.gerrit.orig/Module.h	2022-12-08 15:54:27.201417306 +0530
+++ OCDM-Playready-Nexus-SVP.gerrit/Module.h	2022-12-08 22:34:28.365154634 +0530
@@ -20,5 +20,10 @@
 #pragma once
 
 #ifndef MODULE_NAME
-#define MODULE_NAME PlayReady
+#define MODULE_NAME OCDM_Playready
 #endif
+
+#include <com/com.h>
+#include <core/core.h>
+#include <tracing/tracing.h>
+#include <websocket/websocket.h>
