From e9ba814f48337c8094d6f8bbd92a0a6657353ef6 Mon Sep 17 00:00:00 2001
From: Seungha Yang <seungha.yang@navercorp.com>
Date: Sun, 5 May 2019 19:08:55 +0900
Subject: [PATCH 1/5] video-color: Define bt2020-10 transfer characteristics
 for clarity

bt707, bt2020-10, and bt2020-12 transfer characteristics are functionally
identical but have their own unique values by specification.
---
 gst-libs/gst/video/video-color.c | 3 +++
 gst-libs/gst/video/video-color.h | 8 +++++++-
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/gst-libs/gst/video/video-color.c b/gst-libs/gst/video/video-color.c
index c61588aaa..211229d72 100644
--- a/gst-libs/gst/video/video-color.c
+++ b/gst-libs/gst/video/video-color.c
@@ -69,6 +69,7 @@ static const ColorimetryInfo colorimetry[] = {
   MAKE_COLORIMETRY (SMPTE240M, _16_235, SMPTE240M, SMPTE240M, SMPTE240M),
   MAKE_COLORIMETRY (SRGB, _0_255, RGB, SRGB, BT709),
   MAKE_COLORIMETRY (BT2020, _16_235, BT2020, BT2020_12, BT2020),
+  MAKE_COLORIMETRY (BT2020_10, _16_235, BT2020, BT2020_10, BT2020),
   MAKE_COLORIMETRY (NONAME, _0_255, BT601, UNKNOWN, UNKNOWN),
   MAKE_COLORIMETRY (NONAME, _UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN),       /* Keep last! */
 };
@@ -432,6 +433,7 @@ gst_video_color_transfer_encode (GstVideoTransferFunction func, gdouble val)
       res = pow (val, 1.0 / 2.2);
       break;
     case GST_VIDEO_TRANSFER_BT709:
+    case GST_VIDEO_TRANSFER_BT2020_10:
       if (val < 0.018)
         res = 4.5 * val;
       else
@@ -520,6 +522,7 @@ gst_video_color_transfer_decode (GstVideoTransferFunction func, gdouble val)
       res = pow (val, 2.2);
       break;
     case GST_VIDEO_TRANSFER_BT709:
+    case GST_VIDEO_TRANSFER_BT2020_10:
       if (val < 0.081)
         res = val / 4.5;
       else
diff --git a/gst-libs/gst/video/video-color.h b/gst-libs/gst/video/video-color.h
index 31a7fab08..4dc6b912f 100644
--- a/gst-libs/gst/video/video-color.h
+++ b/gst-libs/gst/video/video-color.h
@@ -90,6 +90,10 @@ gboolean gst_video_color_matrix_get_Kr_Kb (GstVideoColorMatrix matrix, gdouble *
  *                                range. Used for BT.2020 with 12 bits per
  *                                component. Since: 1.6
  * @GST_VIDEO_TRANSFER_ADOBERGB: Gamma 2.19921875. Since: 1.8
+ * @GST_VIDEO_TRANSFER_BT2020_10: Rec. ITU-R BT.2020-2 with 10 bits per component.
+ *                                (functionally the same as the values
+ *                                GST_VIDEO_TRANSFER_BT709 and GST_VIDEO_TRANSFER_BT2020_12).
+ *                                Since: 1.18
  *
  * The video transfer function defines the formula for converting between
  * non-linear RGB (R'G'B') and linear RGB
@@ -107,7 +111,8 @@ typedef enum {
   GST_VIDEO_TRANSFER_LOG100,
   GST_VIDEO_TRANSFER_LOG316,
   GST_VIDEO_TRANSFER_BT2020_12,
-  GST_VIDEO_TRANSFER_ADOBERGB
+  GST_VIDEO_TRANSFER_ADOBERGB,
+  GST_VIDEO_TRANSFER_BT2020_10
 } GstVideoTransferFunction;
 
 GST_VIDEO_API
@@ -205,6 +210,7 @@ typedef struct {
 #define GST_VIDEO_COLORIMETRY_SMPTE240M   "smpte240m"
 #define GST_VIDEO_COLORIMETRY_SRGB        "sRGB"
 #define GST_VIDEO_COLORIMETRY_BT2020      "bt2020"
+#define GST_VIDEO_COLORIMETRY_BT2020_10   "bt2020-10"
 
 GST_VIDEO_API
 gboolean     gst_video_colorimetry_matches     (const GstVideoColorimetry *cinfo, const gchar *color);
-- 
2.29.2


From 112613f503d5b39e93bf6b4cf43f8c55570a66c8 Mon Sep 17 00:00:00 2001
From: Seungha Yang <seungha.yang@navercorp.com>
Date: Sun, 5 May 2019 19:22:13 +0900
Subject: [PATCH 2/5] video-color: Add SMPTE ST 2084 support and BT 2100
 colorimetry

SMPTE ST 2084 transfer characteristics (a.k.a ITU-R BT.2100-1 perceptual quantization, PQ)
is used for various HDR standard.
With ST 2084, we can represent BT 2100 (Rec. 2100). BT 2100 defines
various aspect of HDR such as resolution, transfer functions, matrix, primaries
and etc. It uses BT2020 color space (primaries and matrix) with PQ or HLG
transfer functions.
---
 gst-libs/gst/video/video-color.c | 27 +++++++++++++++++++++++++++
 gst-libs/gst/video/video-color.h |  7 ++++++-
 2 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/gst-libs/gst/video/video-color.c b/gst-libs/gst/video/video-color.c
index 211229d72..761df3319 100644
--- a/gst-libs/gst/video/video-color.c
+++ b/gst-libs/gst/video/video-color.c
@@ -70,6 +70,7 @@ static const ColorimetryInfo colorimetry[] = {
   MAKE_COLORIMETRY (SRGB, _0_255, RGB, SRGB, BT709),
   MAKE_COLORIMETRY (BT2020, _16_235, BT2020, BT2020_12, BT2020),
   MAKE_COLORIMETRY (BT2020_10, _16_235, BT2020, BT2020_10, BT2020),
+  MAKE_COLORIMETRY (BT2100_PQ, _16_235, BT2020, SMPTE2084, BT2020),
   MAKE_COLORIMETRY (NONAME, _0_255, BT601, UNKNOWN, UNKNOWN),
   MAKE_COLORIMETRY (NONAME, _UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN),       /* Keep last! */
 };
@@ -475,6 +476,20 @@ gst_video_color_transfer_encode (GstVideoTransferFunction func, gdouble val)
     case GST_VIDEO_TRANSFER_ADOBERGB:
       res = pow (val, 1.0 / 2.19921875);
       break;
+    case GST_VIDEO_TRANSFER_SMPTE2084:
+    {
+      gdouble c1 = 3424.0 / 4096.0;     /* c3 - c2 + 1 */
+      gdouble c2 = 32 * 2413 / 4096.0;
+      gdouble c3 = 32 * 2392 / 4096.0;
+      gdouble m = 128 * 2523 / 4096.0;
+      gdouble n = 0.25 * 2610 / 4096.0;
+      gdouble Ln = pow (val, n);
+
+      /* val equal to 1 for peak white is ordinarily intended to
+       * correspond to a reference output luminance level of 10000 cd/m^2  */
+      res = pow ((c1 + c2 * Ln) / (1.0 + c3 * Ln), m);
+      break;
+    }
   }
   return res;
 }
@@ -564,6 +579,18 @@ gst_video_color_transfer_decode (GstVideoTransferFunction func, gdouble val)
     case GST_VIDEO_TRANSFER_ADOBERGB:
       res = pow (val, 2.19921875);
       break;
+    case GST_VIDEO_TRANSFER_SMPTE2084:
+    {
+      gdouble c1 = 3424.0 / 4096.0;     /* c3 - c2 + 1 */
+      gdouble c2 = 32 * 2413 / 4096.0;
+      gdouble c3 = 32 * 2392 / 4096.0;
+      gdouble mi = 1 / (128 * 2523 / 4096.0);
+      gdouble ni = 1 / (0.25 * 2610 / 4096.0);
+      gdouble nm = pow (val, mi);
+
+      res = pow ((nm - c1) / (c2 - c3 * nm), ni);
+      break;
+    }
   }
   return res;
 }
diff --git a/gst-libs/gst/video/video-color.h b/gst-libs/gst/video/video-color.h
index 4dc6b912f..b22fa1beb 100644
--- a/gst-libs/gst/video/video-color.h
+++ b/gst-libs/gst/video/video-color.h
@@ -94,6 +94,9 @@ gboolean gst_video_color_matrix_get_Kr_Kb (GstVideoColorMatrix matrix, gdouble *
  *                                (functionally the same as the values
  *                                GST_VIDEO_TRANSFER_BT709 and GST_VIDEO_TRANSFER_BT2020_12).
  *                                Since: 1.18
+ * @GST_VIDEO_TRANSFER_SMPTE2084: SMPTE ST 2084 for 10, 12, 14, and 16-bit systems.
+ *                                Known as perceptual quantization (PQ)
+ *                                Since: 1.18
  *
  * The video transfer function defines the formula for converting between
  * non-linear RGB (R'G'B') and linear RGB
@@ -112,7 +115,8 @@ typedef enum {
   GST_VIDEO_TRANSFER_LOG316,
   GST_VIDEO_TRANSFER_BT2020_12,
   GST_VIDEO_TRANSFER_ADOBERGB,
-  GST_VIDEO_TRANSFER_BT2020_10
+  GST_VIDEO_TRANSFER_BT2020_10,
+  GST_VIDEO_TRANSFER_SMPTE2084
 } GstVideoTransferFunction;
 
 GST_VIDEO_API
@@ -211,6 +215,7 @@ typedef struct {
 #define GST_VIDEO_COLORIMETRY_SRGB        "sRGB"
 #define GST_VIDEO_COLORIMETRY_BT2020      "bt2020"
 #define GST_VIDEO_COLORIMETRY_BT2020_10   "bt2020-10"
+#define GST_VIDEO_COLORIMETRY_BT2100_PQ   "bt2100-pq"
 
 GST_VIDEO_API
 gboolean     gst_video_colorimetry_matches     (const GstVideoColorimetry *cinfo, const gchar *color);
-- 
2.29.2


From a829beedb4076d16dcf8aad033a1b925dffa8498 Mon Sep 17 00:00:00 2001
From: Seungha Yang <seungha.yang@navercorp.com>
Date: Sun, 5 May 2019 21:02:55 +0900
Subject: [PATCH 3/5] video-color: Add ARIB STD-B67 transfer chracteristic
 function

It's known also as Rec. ITU-R BT.2100-1 hybrid log-gamma (HLG) used for
both SDR and HDR rendering.
---
 gst-libs/gst/video/video-color.c | 28 ++++++++++++++++++++++++++++
 gst-libs/gst/video/video-color.h |  7 ++++++-
 2 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/gst-libs/gst/video/video-color.c b/gst-libs/gst/video/video-color.c
index 761df3319..42075bc4f 100644
--- a/gst-libs/gst/video/video-color.c
+++ b/gst-libs/gst/video/video-color.c
@@ -71,6 +71,7 @@ static const ColorimetryInfo colorimetry[] = {
   MAKE_COLORIMETRY (BT2020, _16_235, BT2020, BT2020_12, BT2020),
   MAKE_COLORIMETRY (BT2020_10, _16_235, BT2020, BT2020_10, BT2020),
   MAKE_COLORIMETRY (BT2100_PQ, _16_235, BT2020, SMPTE2084, BT2020),
+  MAKE_COLORIMETRY (BT2100_HLG, _16_235, BT2020, ARIB_STD_B67, BT2020),
   MAKE_COLORIMETRY (NONAME, _0_255, BT601, UNKNOWN, UNKNOWN),
   MAKE_COLORIMETRY (NONAME, _UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN),       /* Keep last! */
 };
@@ -490,6 +491,20 @@ gst_video_color_transfer_encode (GstVideoTransferFunction func, gdouble val)
       res = pow ((c1 + c2 * Ln) / (1.0 + c3 * Ln), m);
       break;
     }
+    case GST_VIDEO_TRANSFER_ARIB_STD_B67:
+    {
+      gdouble a = 0.17883277;
+      gdouble b = 0.28466892;
+      gdouble c = 0.55991073;
+
+      /* For [0, 1] normalized source as defined by HEVC specification */
+      if (val > (1.0 / 12.0))
+        res = a * log (12.0 * val - b) + c;
+      else
+        res = sqrt (3.0 * val);
+
+      break;
+    }
   }
   return res;
 }
@@ -591,6 +606,19 @@ gst_video_color_transfer_decode (GstVideoTransferFunction func, gdouble val)
       res = pow ((nm - c1) / (c2 - c3 * nm), ni);
       break;
     }
+    case GST_VIDEO_TRANSFER_ARIB_STD_B67:
+    {
+      gdouble a = 0.17883277;
+      gdouble b = 0.28466892;
+      gdouble c = 0.55991073;
+
+      if (val > 0.5)
+        res = (exp ((val - c) / a) + b) / 12.0;
+      else
+        res = val * val / 3.0;
+
+      break;
+    }
   }
   return res;
 }
diff --git a/gst-libs/gst/video/video-color.h b/gst-libs/gst/video/video-color.h
index b22fa1beb..1f86e6eec 100644
--- a/gst-libs/gst/video/video-color.h
+++ b/gst-libs/gst/video/video-color.h
@@ -97,6 +97,9 @@ gboolean gst_video_color_matrix_get_Kr_Kb (GstVideoColorMatrix matrix, gdouble *
  * @GST_VIDEO_TRANSFER_SMPTE2084: SMPTE ST 2084 for 10, 12, 14, and 16-bit systems.
  *                                Known as perceptual quantization (PQ)
  *                                Since: 1.18
+ * @GST_VIDEO_TRANSFER_ARIB_STD_B67: Association of Radio Industries and Businesses (ARIB)
+ *                                   STD-B67 and Rec. ITU-R BT.2100-1 hybrid loggamma (HLG) system
+ *                                   Since: 1.18
  *
  * The video transfer function defines the formula for converting between
  * non-linear RGB (R'G'B') and linear RGB
@@ -116,7 +119,8 @@ typedef enum {
   GST_VIDEO_TRANSFER_BT2020_12,
   GST_VIDEO_TRANSFER_ADOBERGB,
   GST_VIDEO_TRANSFER_BT2020_10,
-  GST_VIDEO_TRANSFER_SMPTE2084
+  GST_VIDEO_TRANSFER_SMPTE2084,
+  GST_VIDEO_TRANSFER_ARIB_STD_B67
 } GstVideoTransferFunction;
 
 GST_VIDEO_API
@@ -216,6 +220,7 @@ typedef struct {
 #define GST_VIDEO_COLORIMETRY_BT2020      "bt2020"
 #define GST_VIDEO_COLORIMETRY_BT2020_10   "bt2020-10"
 #define GST_VIDEO_COLORIMETRY_BT2100_PQ   "bt2100-pq"
+#define GST_VIDEO_COLORIMETRY_BT2100_HLG  "bt2100-hlg"
 
 GST_VIDEO_API
 gboolean     gst_video_colorimetry_matches     (const GstVideoColorimetry *cinfo, const gchar *color);
-- 
2.29.2


From 0bcaac51880b7f929bf09704b699bdf608d87e83 Mon Sep 17 00:00:00 2001
From: Seungha Yang <seungha.yang@navercorp.com>
Date: Wed, 10 Jul 2019 00:16:58 +0900
Subject: [PATCH 4/5] video-color: Add util functions for conversion from/to
 ISO/IEC 23001-8

... and also as known as ITU-T H.273.

The conversion has been handled per plugin for now. That causes
code duplication a lot also some plugins might not be updated with newly introduced
color{matrix,transfer,primaries} enum value(s).

Instead of handling it per plugin, centralized handling can remove such
code duplication and make plugins be up-to-dated.
---
 gst-libs/gst/video/video-color.c | 269 +++++++++++++++++++++++++++++++
 gst-libs/gst/video/video-color.h |  22 +++
 2 files changed, 291 insertions(+)

diff --git a/gst-libs/gst/video/video-color.c b/gst-libs/gst/video/video-color.c
index 42075bc4f..9c0953e18 100644
--- a/gst-libs/gst/video/video-color.c
+++ b/gst-libs/gst/video/video-color.c
@@ -622,3 +622,272 @@ gst_video_color_transfer_decode (GstVideoTransferFunction func, gdouble val)
   }
   return res;
 }
+
+/* conversion between GStreamer color{matrix,transfer,primaries} enum
+ * and indices defined by ITU-T H.273 and ISO/IEC 230001-8 specification */
+
+/* FIXME 2.0: Define color{matrix,transfer,primaries} with explicit numbering
+ * to be matched with specification
+ */
+
+/**
+ * gst_video_color_matrix_to_iso:
+ * @matrix: a #GstVideoColorMatrix
+ *
+ * Converts #GstVideoColorMatrix to the "matrix coefficients"
+ * (MatrixCoefficients) value defined by "ISO/IEC 23001-8 Section 7.3 Table 4"
+ * and "ITU-T H.273 Table 4".
+ * "H.264 Table E-5" and "H.265 Table E.5" share the identical values.
+ *
+ * Returns: The value of ISO/IEC 23001-8 matrix coefficients.
+ *
+ * Since: 1.18
+ */
+guint
+gst_video_color_matrix_to_iso (GstVideoColorMatrix matrix)
+{
+  switch (matrix) {
+    case GST_VIDEO_COLOR_MATRIX_RGB:
+      return 0;
+    case GST_VIDEO_COLOR_MATRIX_BT709:
+      return 1;
+    case GST_VIDEO_COLOR_MATRIX_FCC:
+      return 4;
+    case GST_VIDEO_COLOR_MATRIX_BT601:
+      return 6;
+    case GST_VIDEO_COLOR_MATRIX_SMPTE240M:
+      return 7;
+    case GST_VIDEO_COLOR_MATRIX_BT2020:
+      return 9;
+    case GST_VIDEO_COLOR_MATRIX_UNKNOWN:
+    default:
+      return 2;
+  }
+}
+
+/**
+ * gst_video_color_transfer_to_iso:
+ * @func: a #GstVideoTransferFunction
+ *
+ * Converts #GstVideoTransferFunction to the "transfer characteristics"
+ * (TransferCharacteristics) value defined by "ISO/IEC 23001-8 Section 7.2 Table 3"
+ * and "ITU-T H.273 Table 3".
+ * "H.264 Table E-4" and "H.265 Table E.4" share the identical values.
+ *
+ * Returns: The value of ISO/IEC 23001-8 transfer characteristics.
+ *
+ * Since: 1.18
+ */
+guint
+gst_video_color_transfer_to_iso (GstVideoTransferFunction func)
+{
+  switch (func) {
+    case GST_VIDEO_TRANSFER_BT709:
+      return 1;
+    case GST_VIDEO_TRANSFER_GAMMA22:
+      return 4;
+    case GST_VIDEO_TRANSFER_GAMMA28:
+      return 5;
+    case GST_VIDEO_TRANSFER_SMPTE240M:
+      return 7;
+    case GST_VIDEO_TRANSFER_GAMMA10:
+      return 8;
+    case GST_VIDEO_TRANSFER_LOG100:
+      return 9;
+    case GST_VIDEO_TRANSFER_LOG316:
+      return 10;
+    case GST_VIDEO_TRANSFER_SRGB:
+      return 13;
+    case GST_VIDEO_TRANSFER_BT2020_10:
+      return 14;
+    case GST_VIDEO_TRANSFER_BT2020_12:
+      return 15;
+    case GST_VIDEO_TRANSFER_SMPTE2084:
+      return 16;
+    case GST_VIDEO_TRANSFER_ARIB_STD_B67:
+      return 18;
+    case GST_VIDEO_TRANSFER_GAMMA18:
+    case GST_VIDEO_TRANSFER_GAMMA20:
+    case GST_VIDEO_TRANSFER_ADOBERGB:
+    case GST_VIDEO_TRANSFER_UNKNOWN:
+    default:
+      return 2;
+  }
+}
+
+/**
+ * gst_video_color_primaries_to_iso:
+ * @primaries: a #GstVideoColorPrimaries
+ *
+ * Converts #GstVideoColorPrimaries to the "colour primaries" (ColourPrimaries)
+ * value defined by "ISO/IEC 23001-8 Section 7.1 Table 2"
+ * and "ITU-T H.273 Table 2".
+ * "H.264 Table E-3" and "H.265 Table E.3" share the identical values.
+ *
+ * Returns: The value of ISO/IEC 23001-8 colour primaries.
+ *
+ * Since: 1.18
+ */
+guint
+gst_video_color_primaries_to_iso (GstVideoColorPrimaries primaries)
+{
+  switch (primaries) {
+    case GST_VIDEO_COLOR_PRIMARIES_BT709:
+      return 1;
+    case GST_VIDEO_COLOR_PRIMARIES_BT470M:
+      return 4;
+    case GST_VIDEO_COLOR_PRIMARIES_BT470BG:
+      return 5;
+    case GST_VIDEO_COLOR_PRIMARIES_SMPTE170M:
+      return 6;
+    case GST_VIDEO_COLOR_PRIMARIES_SMPTE240M:
+      return 7;
+    case GST_VIDEO_COLOR_PRIMARIES_FILM:
+      return 8;
+    case GST_VIDEO_COLOR_PRIMARIES_BT2020:
+      return 9;
+    case GST_VIDEO_COLOR_PRIMARIES_SMPTEST428:
+      return 10;
+    case GST_VIDEO_COLOR_PRIMARIES_SMPTERP431:
+      return 11;
+    case GST_VIDEO_COLOR_PRIMARIES_SMPTEEG432:
+      return 12;
+    case GST_VIDEO_COLOR_PRIMARIES_EBU3213:
+      return 22;
+    case GST_VIDEO_COLOR_PRIMARIES_ADOBERGB:
+    case GST_VIDEO_COLOR_PRIMARIES_UNKNOWN:
+    default:
+      return 2;
+  }
+}
+
+/**
+ * gst_video_color_matrix_from_iso:
+ * @value: a ITU-T H.273 matrix coefficients value
+ *
+ * Converts the @value to the #GstVideoColorMatrix
+ * The matrix coefficients (MatrixCoefficients) value is
+ * defined by "ISO/IEC 23001-8 Section 7.3 Table 4"
+ * and "ITU-T H.273 Table 4".
+ * "H.264 Table E-5" and "H.265 Table E.5" share the identical values.
+ *
+ * Returns: the matched #GstVideoColorMatrix
+ *
+ * Since: 1.18
+ */
+GstVideoColorMatrix
+gst_video_color_matrix_from_iso (guint value)
+{
+  switch (value) {
+    case 0:
+      return GST_VIDEO_COLOR_MATRIX_RGB;
+    case 1:
+      return GST_VIDEO_COLOR_MATRIX_BT709;
+    case 4:
+      return GST_VIDEO_COLOR_MATRIX_FCC;
+    case 5:
+    case 6:
+      return GST_VIDEO_COLOR_MATRIX_BT601;
+    case 7:
+      return GST_VIDEO_COLOR_MATRIX_SMPTE240M;
+    case 9:
+      return GST_VIDEO_COLOR_MATRIX_BT2020;
+    case 2:
+    default:
+      return GST_VIDEO_COLOR_MATRIX_UNKNOWN;
+  }
+}
+
+/**
+ * gst_video_color_transfer_from_iso:
+ * @value: a ITU-T H.273 transfer characteristics value
+ *
+ * Converts the @value to the #GstVideoTransferFunction
+ * The transfer characteristics (TransferCharacteristics) value is
+ * defined by "ISO/IEC 23001-8 Section 7.2 Table 3"
+ * and "ITU-T H.273 Table 3".
+ * "H.264 Table E-4" and "H.265 Table E.4" share the identical values.
+ *
+ * Returns: the matched #GstVideoTransferFunction
+ *
+ * Since: 1.18
+ */
+GstVideoTransferFunction
+gst_video_color_transfer_from_iso (guint value)
+{
+  switch (value) {
+    case 1:
+    case 6:
+      return GST_VIDEO_TRANSFER_BT709;
+    case 4:
+      return GST_VIDEO_TRANSFER_GAMMA22;
+    case 5:
+      return GST_VIDEO_TRANSFER_GAMMA28;
+    case 7:
+      return GST_VIDEO_TRANSFER_SMPTE240M;
+    case 8:
+      return GST_VIDEO_TRANSFER_GAMMA10;
+    case 9:
+      return GST_VIDEO_TRANSFER_LOG100;
+    case 10:
+      return GST_VIDEO_TRANSFER_LOG316;
+    case 13:
+      return GST_VIDEO_TRANSFER_SRGB;
+    case 14:
+      return GST_VIDEO_TRANSFER_BT2020_10;
+    case 15:
+      return GST_VIDEO_TRANSFER_BT2020_12;
+    case 16:
+      return GST_VIDEO_TRANSFER_SMPTE2084;
+    case 18:
+      return GST_VIDEO_TRANSFER_ARIB_STD_B67;
+    case 2:
+    default:
+      return GST_VIDEO_TRANSFER_UNKNOWN;
+  }
+}
+
+/**
+ * gst_video_color_primaries_from_iso:
+ * @value: a ITU-T H.273 colour primaries value
+ *
+ * Converts the @value to the #GstVideoColorPrimaries
+ * The colour primaries (ColourPrimaries) value is
+ * defined by "ISO/IEC 23001-8 Section 7.1 Table 2" and "ITU-T H.273 Table 2".
+ * "H.264 Table E-3" and "H.265 Table E.3" share the identical values.
+ *
+ * Returns: the matched #GstVideoColorPrimaries
+ *
+ * Since: 1.18
+ */
+GstVideoColorPrimaries
+gst_video_color_primaries_from_iso (guint value)
+{
+  switch (value) {
+    case 1:
+      return GST_VIDEO_COLOR_PRIMARIES_BT709;
+    case 4:
+      return GST_VIDEO_COLOR_PRIMARIES_BT470M;
+    case 5:
+      return GST_VIDEO_COLOR_PRIMARIES_BT470BG;
+    case 6:
+      return GST_VIDEO_COLOR_PRIMARIES_SMPTE170M;
+    case 7:
+      return GST_VIDEO_COLOR_PRIMARIES_SMPTE240M;
+    case 8:
+      return GST_VIDEO_COLOR_PRIMARIES_FILM;
+    case 9:
+      return GST_VIDEO_COLOR_PRIMARIES_BT2020;
+    case 10:
+      return GST_VIDEO_COLOR_PRIMARIES_SMPTEST428;
+    case 11:
+      return GST_VIDEO_COLOR_PRIMARIES_SMPTERP431;
+    case 12:
+      return GST_VIDEO_COLOR_PRIMARIES_SMPTEEG432;
+    case 22:
+      return GST_VIDEO_COLOR_PRIMARIES_EBU3213;
+    case 2:
+    default:
+      return GST_VIDEO_COLOR_PRIMARIES_UNKNOWN;
+  }
+}
diff --git a/gst-libs/gst/video/video-color.h b/gst-libs/gst/video/video-color.h
index 1f86e6eec..b5adf7340 100644
--- a/gst-libs/gst/video/video-color.h
+++ b/gst-libs/gst/video/video-color.h
@@ -242,6 +242,28 @@ void         gst_video_color_range_offsets     (GstVideoColorRange range,
                                                 gint offset[GST_VIDEO_MAX_COMPONENTS],
                                                 gint scale[GST_VIDEO_MAX_COMPONENTS]);
 
+/* conversion between GStreamer color{matrix,transfer,primaries} enum and
+ * values defined by ISO/IEC 23001-8 and ITU-T H.273 specification.
+ * Also H264 and H265 specifications follow the color{matrix,trasfer,primaries}
+ * values */
+
+GST_VIDEO_API
+guint                     gst_video_color_matrix_to_iso      (GstVideoColorMatrix matrix);
+
+GST_VIDEO_API
+guint                     gst_video_color_transfer_to_iso    (GstVideoTransferFunction func);
+
+GST_VIDEO_API
+guint                     gst_video_color_primaries_to_iso   (GstVideoColorPrimaries primaries);
+
+GST_VIDEO_API
+GstVideoColorMatrix       gst_video_color_matrix_from_iso    (guint value);
+
+GST_VIDEO_API
+GstVideoTransferFunction  gst_video_color_transfer_from_iso  (guint value);
+
+GST_VIDEO_API
+GstVideoColorPrimaries    gst_video_color_primaries_from_iso (guint value);
 
 G_END_DECLS
 
-- 
2.29.2


From 3736b0aeedec51ad7870784472053314a027ecf6 Mon Sep 17 00:00:00 2001
From: Xabier Rodriguez Calvar <calvaris@igalia.com>
Date: Wed, 27 Jan 2021 17:03:58 +0100
Subject: [PATCH 5/5] Build fixes for GST_TAG_API and audio-buffer

---
 gst-libs/gst/audio/audio-buffer.c | 2 +-
 gst-libs/gst/tag/tag.h            | 5 +++++
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/gst-libs/gst/audio/audio-buffer.c b/gst-libs/gst/audio/audio-buffer.c
index e0165728d..5fdec3c35 100644
--- a/gst-libs/gst/audio/audio-buffer.c
+++ b/gst-libs/gst/audio/audio-buffer.c
@@ -23,7 +23,7 @@
 #endif
 
 #include "audio-buffer.h"
-
+#include <string.h>
 
 static void
 gst_audio_buffer_unmap_internal (GstAudioBuffer * buffer, guint n_unmap)
diff --git a/gst-libs/gst/tag/tag.h b/gst-libs/gst/tag/tag.h
index 1e2eec4ea..4bdc41d7c 100644
--- a/gst-libs/gst/tag/tag.h
+++ b/gst-libs/gst/tag/tag.h
@@ -29,6 +29,11 @@
 #include <gst/tag/xmpwriter.h>
 #include <gst/tag/tag-enumtypes.h>
 
+#ifdef GST_TAG_API
+#undef GST_TAG_API
+#define GST_TAG_API extern __attribute__ ((visibility ("default")))
+#endif
+
 G_BEGIN_DECLS
 
 /* Tag names */
-- 
2.29.2

